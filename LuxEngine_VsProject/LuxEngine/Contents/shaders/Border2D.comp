#version 450

#define gx gl_GlobalInvocationID.x	//The x coordinate of the shader call. This does not depend on the workgroup size
#define gy gl_GlobalInvocationID.y	//The y coordinate of the shader call. This does not depend on the workgroup size
#define g gl_GlobalInvocationID



layout (local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in;

layout(std430, binding = 0) buffer colorOutput_{ vec4 colorOutput[]; };
layout(std430, binding = 1) buffer windowSize_{ uint width; uint height; };
layout(std430, binding = 2) buffer zBuffer_{ uint zBuffer[]; };
layout(std430, binding = 3) buffer objData_{
	//16
	vec2 fp;	 //0
	vec2 sp;	 //8
	//4
	uint ID;	 //16
};







void setPixelColor(vec2 pos, vec4 col){
	uint i = uint(pos.y) * width + uint(pos.x);

	//TODO use ordered render and component cache
	if(zBuffer[i] <= ID){
		zBuffer[i] = -1;
		colorOutput[i] = col;
	}
}




void main() {
	vec2 dist = abs(fp - sp);
	if(gx > dist.x || gy > dist.y) return;

//	setPixelColor(vec2(0,0), vec4(0,1,0,1));
	setPixelColor(vec2(fp.x + gx, fp.y), vec4(0,1,0,1));
	setPixelColor(vec2(fp.x + gx, sp.y), vec4(0,1,0,1));
	setPixelColor(vec2(fp.x, fp.y + gy), vec4(0,1,0,1));
	setPixelColor(vec2(sp.x, fp.y + gy), vec4(0,1,0,1));
//	setPixelColor(fp + vec2(g) * (dist / 100), vec4(0,1,0,1));
//	setPixelColor(vec2(i,j),vec4(0,1,0,1));
}
