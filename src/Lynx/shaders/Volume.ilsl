#include "src/Lynx/shaders/stdlib.ilsh"

#define gx gl_GlobalInvocationID.x
#define gy gl_GlobalInvocationID.y
#define g gl_GlobalInvocationID




// layout (local_size_x = 32, local_size_y = 1, local_size_z = 1 ) in;

// layout(std430, binding = 0) buffer ext_outcol{
// 	vec4 arrayh[15 * 2];
// 	int valueh;
// 	Point p;
// 	Point ps[20];
// 	vec4 outcol[];
// };

extern outCol {
	f32v4 outcol[];
}

// layout(std430, binding = 1) buffer ext_wsize{ uvec2 wsize; };

extern wsize {
	u32v2 wsize;
}

// layout(std140, binding = 2) uniform data{
// 	// Point points;
// 		vec3 pos;  	//position
// 	float r;   	//radius
// 	vec4 col;  	//color
// };

local {
	f32v3 pos;
	f32 r;
	f32v4 col;
}





void setPixel(f32v2 pos, f32v4 col) {
	u32 i = u32(pos.y) * wsize.x + u32(pos.x);
	outcol[i] = col;
}


void main() {
	setPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));
	setPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));

	setPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));
	setPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));

	setPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));
	setPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));
	// setPixel(pos.xy );
}

