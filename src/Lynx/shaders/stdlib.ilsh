
//#include "src/Lynx/shaders/stdlib2.ilsh"




//Trigonometry

any_f32 rad(any_f32 _deg);
any_f32 deg(any_f32 _rad);

any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);
any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);
any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);
any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);
                                                                any_f32  atan(any_f32 _y, any_f32 _n);




//Exponential

any_f32 pow(any_f32 _b, any_f32 _e);
any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);
any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);
any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);
any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);




//Common functions

any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);
any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);
any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);

any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);
any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);

any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);
any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);

any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);
any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);
any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);
any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);
any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);
any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);
any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);
any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);

any_f32(any_f32 _a, any_f32 _b, any_b _which);
any_f64(any_f64 _a, any_f64 _b, any_b _which);
any_u32(any_u32 _a, any_u32 _b, any_b _which);
any_i32(any_i32 _a, any_i32 _b, any_b _which);
any_b(    any_b _a,   any_b _b, any_b _which);

any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);
any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);
any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);
any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);

any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);
any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);

any_i32 floatBitsToI32(highp any_f32 _n);
any_i64 floatBitsToU32(highp any_f64 _n);
any_f32 i32BitsToFloat(highp any_i32 _n);
any_f32 u32BitsToFloat(highp any_u32 _n);

any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);
any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);

any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);
any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);




//Packing/unpacking
//TODO

//Geometric functions

f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);
f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);

f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)
f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)

any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)
any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)

any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)
any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)





//Matrix functions
//TODO