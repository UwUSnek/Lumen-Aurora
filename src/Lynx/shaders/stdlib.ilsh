
//#include "src/Lynx/shaders/stdlib2.ilsh"







//Trigonometry

f32 rad(f32 _deg){}
f32 deg(f32 _rad){}

f32   sin(f32 _angle){}  f32   cos(f32 _angle){}  f32   tan(f32 _angle){}
f32  asin(f32 _n){}      f32  acos(f32 _n){}      f32  atan(f32 _y_over_n){}
f32  sinh(f32 _n){}      f32  cosh(f32 _n){}      f32  tanh(f32 _n){}
f32 asinh(f32 _n){}      f32 acosh(f32 _n){}      f32 atanh(f32 _n){}
                                                                f32  atan(f32 _y, f32 _n){}




//Exponential

f32 pow(f32 _b, f32 _e){}
f32   exp(f32 _n){}      f32   log(f32 _n){}
f32  exp2(f32 _n){}      f32  log2(f32 _n){}
f32  sqrt(f32 _n){}      f64  sqrt(f64 _n){}
f32 isqrt(f32 _n){}      f64 isqrt(f64 _n){}




//Common functions

i32 abs(i32 _n){}        i32 sign(i32 _n){}
f32 abs(f32 _n){}        f32 sign(f32 _n){}       f32 fract(f32 _n){}
f64 abs(f64 _n){}        f64 sign(f64 _n){}       f64 fract(f64 _n){}

f32 floor(f32 _n){}      f32 ceilf(f32 _n){}      f32 trunc(f32 _n){}      f32 round(f32 _n){}      f32 roundEven(f32 _n){}
f64 floor(f64 _n){}      f64 ceilf(f64 _n){}      f64 trunc(f64 _n){}      f64 round(f64 _n){}      f64 roundEven(f64 _n){}

f32 mod(f32 _x, f32){}         f64 mod(f64 _x, f64){}         f64 modf(f64 _x, out f64 _i){}
f32 mod(f32 _x,     f32){}         f64 mod(f64 _x,     f64){}         f64 modf(f64 _x, out f32 _i){}

u32 min(u32 _a, i64 _b){}       u32 max(u32 _a, i64 _b){}       u32 clamp(u32 _a, i64 _b){}         u32 mix(u32 _n, i64 _min, i64 _max){}
i32 min(i32 _a, i32 _b){}       i32 max(i32 _a, i32 _b){}       i32 clamp(i32 _a, i32 _b){}         i32 mix(i32 _n, i32 _min, i32 _max){}
f32 min(f32 _a, f32 _b){}       f32 max(f32 _a, f32 _b){}       f32 clamp(f32 _a, f32 _b){}         f32 mix(f32 _n, f32 _min, f32 _max){}
f64 min(f64 _a, f64 _b){}       f64 max(f64 _a, f64 _b){}       f64 clamp(f64 _a, f64 _b){}         f64 mix(f64 _n, f64 _min, f64 _max){}
u32 min(u32 _a, u32     _b){}       u32 max(u32 _a,     u32 _b){}       u32 clamp(u32 _a,     u32 _b){}         u32 mix(u32 _n,     u32 _min,     u32 _max){}
i32 min(i32 _a, i32     _b){}       i32 max(i32 _a,     i32 _b){}       i32 clamp(i32 _a,     i32 _b){}         i32 mix(i32 _n,     i32 _min,     i32 _max){}
f32 min(f32 _a, f32     _b){}       f32 max(f32 _a,     f32 _b){}       f32 clamp(f32 _a,     f32 _b){}         f32 mix(f32 _n,     f32 _min,     f32 _max){}
f64 min(f64 _a, f64     _b){}       f64 max(f64 _a,     f64 _b){}       f64 clamp(f64 _a,     f64 _b){}         f64 mvix(f64 _n,     f64 _min,     f64 _max){}

//f32(f32 _a, f32 _b, b _which){}
//f64(f64 _a, f64 _b, b _which){}
//u32(u32 _a, u32 _b, b _which){}
//i32(i32 _a, i32 _b, b _which){}
//b(    b _a,   b _b, b _which){}

f32 step(f32 _edge, f32 _n){}        f32 step(f32 _edge0, f32 _edge1, f32 _n){}
f64 step(f64 _edge, f64 _n){}        f64 step(f64 _edge0, f64 _edge1, f64 _n){}
f32 step(    f32 _edge, f32 _n){}        f32 step(    f32 _edge0,     f32 _edge1, f32 _n){}
f64 step(    f64 _edge, f64 _n){}        f64 step(    f64 _edge0,     f64 _edge1, f64 _n){}

b isnan(f32 _n){}        b isinf(f64 _n){}
b isnan(f32 _n){}        b isinf(f64 _n){}

i32 floatBitsToI32(highp f32 _n){}
u32 floatBitsToU32(highp f64 _n){}
f32 i32BitsToFloat(highp i32 _n){}
f32 u32BitsToFloat(highp u32 _n){}

f32 fma(f32 _a, f32 _b, f32 _c){}
f64 fma(f64 _a, f64 _b, f64 _c){}

f32 frexp(highp f32 _n, out highp i32 _exp){}      f32 frexp(highp f32 _n, highp i32 _exp){}
f64 frexp(      f64 _n, out       i32 _exp){}      f64 frexp(      f64 _n,       i32 _exp){}




//Packing/unpacking
//TODO

//Geometric functions

f32 len(f32 _n){}    f32 dist(f32 _a, f32 _b){}
f64 len(f64 _n){}    f64 dist(f64 _a, f64 _b){}

f32 dot(f32 _a, f32 _b){}        f32v3 cross(f32v3 _a, f32v3 _b){}     f32 norm(f32 _n){}
f64 dot(f64 _a, f64 _b){}        f64v3 cross(f64v3 _a, f64v3 _b){}     f64 norm(f64 _n){}

f32 faceForward(f32 _n, f32 _i, f32 _nref){}
f64 faceForward(f64 _n, f64 _i, f64 _nref){}

f32 reflect(f32 _i, f32 _n){}     f32 refract(f32 _i, f32 _n, f32 _eta){}
f64 reflect(f64 _i, f64 _n){}     f64 refract(f64 _i, f64 _n, f64 _eta){}





//Matrix functions
//TODO
























////#include "src/Lynx/shaders/stdlib2.ilsh"
//
//
//
//
//
//
//
////Trigonometry
//
//f32 rad(f32 _deg){}
//f32 deg(f32 _rad){}
//
//f32   sin(f32 _angle){}  f32   cos(f32 _angle){}  f32   tan(f32 _angle){}
//f32  asin(f32 _n){}      f32  acos(f32 _n){}      f32  atan(f32 _y_over_n){}
//f32  sinh(f32 _n){}      f32  cosh(f32 _n){}      f32  tanh(f32 _n){}
//f32 asinh(f32 _n){}      f32 acosh(f32 _n){}      f32 atanh(f32 _n){}
//                                                                f32  atan(f32 _y, f32 _n){}
//
//
//
//
////Exponential
//
//f32 pow(f32 _b, f32 _e){}
//f32   exp(f32 _n){}      f32   log(f32 _n){}
//f32  exp2(f32 _n){}      f32  log2(f32 _n){}
//f32  sqrt(f32 _n){}      f64  sqrt(f64 _n){}
//f32 isqrt(f32 _n){}      f64 isqrt(f64 _n){}
//
//
//
//
////Common functions
//
//i32 abs(i32 _n){}        i32 sign(i32 _n){}
//f32 abs(f32 _n){}        f32 sign(f32 _n){}       f32 fract(f32 _n){}
//f64 abs(f64 _n){}        f64 sign(f64 _n){}       f64 fract(f64 _n){}
//
//f32 floor(f32 _n){}      f32 ceilf(f32 _n){}      f32 trunc(f32 _n){}      f32 round(f32 _n){}      f32 roundEven(f32 _n){}
//f64 floor(f64 _n){}      f64 ceilf(f64 _n){}      f64 trunc(f64 _n){}      f64 round(f64 _n){}      f64 roundEven(f64 _n){}
//
//f32 mod(f32 _x, f32){}         f64 mod(f64 _x, f64){}         f64 modf(f64 _x, out f64 _i){}
//f32 mod(f32 _x,     f32){}         f64 mod(f64 _x,     f64){}         f64 modf(f64 _x, out f32 _i){}
//
//u32 min(u32 _a, i64 _b){}       u32 max(u32 _a, i64 _b){}       u32 clamp(u32 _a, i64 _b){}         u32 mix(u32 _n, i64 _min, i64 _max){}
//i32 min(i32 _a, i32 _b){}       i32 max(i32 _a, i32 _b){}       i32 clamp(i32 _a, i32 _b){}         i32 mix(i32 _n, i32 _min, i32 _max){}
//f32 min(f32 _a, f32 _b){}       f32 max(f32 _a, f32 _b){}       f32 clamp(f32 _a, f32 _b){}         f32 mix(f32 _n, f32 _min, f32 _max){}
//f64 min(f64 _a, f64 _b){}       f64 max(f64 _a, f64 _b){}       f64 clamp(f64 _a, f64 _b){}         f64 mix(f64 _n, f64 _min, f64 _max){}
//u32 min(u32 _a, u32     _b){}       u32 max(u32 _a,     u32 _b){}       u32 clamp(u32 _a,     u32 _b){}         u32 mix(u32 _n,     u32 _min,     u32 _max){}
//i32 min(i32 _a, i32     _b){}       i32 max(i32 _a,     i32 _b){}       i32 clamp(i32 _a,     i32 _b){}         i32 mix(i32 _n,     i32 _min,     i32 _max){}
//f32 min(f32 _a, f32     _b){}       f32 max(f32 _a,     f32 _b){}       f32 clamp(f32 _a,     f32 _b){}         f32 mix(f32 _n,     f32 _min,     f32 _max){}
//f64 min(f64 _a, f64     _b){}       f64 max(f64 _a,     f64 _b){}       f64 clamp(f64 _a,     f64 _b){}         f64 mix(f64 _n,     f64 _min,     f64 _max){}
//
//f32(f32 _a, f32 _b, b _which){}
//f64(f64 _a, f64 _b, b _which){}
//u32(u32 _a, u32 _b, b _which){}
//i32(i32 _a, i32 _b, b _which){}
//b(    b _a,   b _b, b _which){}
//
//f32 step(f32 _edge, f32 _n){}        f32 step(f32 _edge0, f32 _edge1, f32 _n){}
//f64 step(f64 _edge, f64 _n){}        f64 step(f64 _edge0, f64 _edge1, f64 _n){}
//f32 step(    f32 _edge, f32 _n){}        f32 step(    f32 _edge0,     f32 _edge1, f32 _n){}
//f64 step(    f64 _edge, f64 _n){}        f64 step(    f64 _edge0,     f64 _edge1, f64 _n){}
//
//b isnan(f32 _n){}        b isinf(f64 _n){}
//b isnan(f32 _n){}        b isinf(f64 _n){}
//
//i32 floatBitsToI32(highp f32 _n){}
//i64 floatBitsToU32(highp f64 _n){}
//f32 i32BitsToFloat(highp i32 _n){}
//f32 u32BitsToFloat(highp u32 _n){}
//
//f32 fma(f32 _a, f32 _b, f32 _c){}
//f64 fma(f64 _a, f64 _b, f64 _c){}
//
//f32 frexp(highp f32 _n, out highp i32 _exp){}      f32 frexp(highp f32 _n, highp i32 _exp){}
//f64 frexp(      f64 _n, out       i32 _exp){}      f64 frexp(      f64 _n,       i32 _exp){}
//
//
//
//
////Packing/unpacking
////TODO
//
////Geometric functions
//
//f32 len(f32 _n){}    f32 dist(f32 _a, anu_f32 _b){}
//f64 len(f64 _n){}    f64 dist(f64 _a, anu_f64 _b){}
//
//f32 dot(f32 _a, f32 _b){}        f32v3 cross(f32v3 _a, f32v3 _b){}     f32 norm(f32 _n){}
//f64 dot(f64 _a, f64 _b){}        f64v3 cross(f64v3 _a, f64v3 _b){}     f64 norm(f64 _n){}
//
//f32 faceForward(f32 _n, f32 _i, f32 _nref){}
//f64 faceForward(f64 _n, f64 _i, f64 _nref){}
//
//f32 reflect(f32 _i, f32 _n){}     f32 refract(f32 _i, f32 _n, f32 _eta){}
//f64 reflect(f64 _i, f64 _n){}     f64 refract(f64 _i, f64 _n, f64 _eta){}
//
//
//
//
//
////Matrix functions
////TODO