#include <string>
#include <iostream>
#include <regex>
#include <fstream>
#include <cstring>
#include <filesystem>

#include "utils.hpp"
#include "Preprocessor/ElmCoords.hpp"






namespace utils {
    /**
     * @brief Prints a formatted line indicator and colors it black.
     *      The color is NOT reset after. The caller function will have to manually change it back.
     * @param n The number of the line. They start from 0, but the shown number is automatically increased by 1 to make it consistent with text exitors.
     */
    static inline void printLineNum(ulong n) {
        std::cerr << ansi::reset << ansi::bold_black << "\n" << std::right << std::setw(8) << n + 1 << " │ ";
    }


    /**
     * @brief Returns a string containing the character.
     *      Invisible characters are replaced with visible glyphs.
     * @param c The character.
     * @param useColor Whether to color invisible characters black. Default: false.
     * @return The formatted character.
     */
    std::string formatChar(char c, bool useColor) {
        /**/ if(c ==  ' ') return useColor ? ansi::black + "·" + ansi::reset : "·";
        else if(c == '\n') return useColor ? ansi::black + "↓" + ansi::reset : "↓";
        else return std::string(1, c);
    }




    //FIXME    WHEN PRINTING LINES GENERATED BY A MACRO, MAKE IT VERY CLEAR THAT THEY WERE GENERATED
    //FIXME    ALSO WRITE WHICH MACRO CALL CREATED IT.
    //FIXME    maybe even write a raw version of the lines on the left and a replaced version of them on the right


    /**
     * @brief Prints an error to stderr, specifying the error type.
     *      This function doesn't stop the program.
     * @param errorType The type of the error.
     * @param errPos The section of the code that caused the error.
     * @param message The error message. This can contain multiple lines.
     *      The error message will be colored red and displayed as bold. ansi::reset will reset to bold red.
     */
    void printError(ErrType errType, ElmCoords errPos, std::string message) {
        printError(errType, ElmCoords(), errPos, message);
    }






    //FIXME TRIM RELEVANT SECTION AND ERROR SECTION
    //FIXME remove all tabs, newlines and whitespaces before and after both
    //FIXME add a parameter to disable trimming

    /**
     * @brief Prints an error to stderr, specifying the error type.
     *      This function doesn't stop the program.
     * @param errorType The type of the error.
     * @param relPos The relevant section of the code.
     * @param errPos The section of the code that caused the error.
     * @param message The error message. This can contain multiple lines.
     *      The error message will be colored red and displayed as bold. ansi::reset will reset to bold red.
     */
    void printError(ErrType errType, ElmCoords relPos, ElmCoords errPos, std::string message) {
        std::cerr << ansi::bold_red;
        if(errType == ErrType::COMMAND) {

            // Print error type
            std::cerr << "Could not parse terminal command:";
        }
        else {
            // Print error type and location
            if(errType == ErrType::PREPROCESSOR) std::cerr << "Preprocessor";
            if(errType == ErrType::COMPILER)     std::cerr << "Compilation";
            std::cerr << " error:\n";


            // Find the line in the original file and calculate the starting index of the preceding line
            bool useRelevant = relPos.filePath.length();
            std::string s = readAndCheckFile(errPos.filePath);
            ulong curLine = useRelevant ? std::min(relPos.lineNum, errPos.lineNum) : errPos.lineNum;
            ulong i       = useRelevant ? std::min(relPos.start,     errPos.start) : errPos.start;
            ulong startingLine = curLine - !!curLine;
            do --i; while(i != (ulong)-1L && s[i] != '\n'); if(i == (ulong)-1L) i = 0;
            do --i; while(i != (ulong)-1L && s[i] != '\n'); if(i == (ulong)-1L) i = 0;
            if(startingLine > 0 && s[i] == '\n') ++i;
            curLine = startingLine;


            // Print location
            ulong errHeight = std::count(s.c_str() + errPos.start, s.c_str() + errPos.end, '\n');
            if(errPos.filePath.length()) {
                std::cerr << "    File │ " << ansi::reset << std::filesystem::canonical(errPos.filePath) << ansi::bold_red << "\n";
                std::cerr << "    Line │ " << ansi::reset;
                if(errHeight == 0) std::cerr << errPos.lineNum + 1;
                else               std::cerr << "From " << errPos.lineNum + 1 << " to " << errPos.lineNum + errHeight + 1;
            }


            // Print all the interested lines and change color according to the indices of the relevant and offending sections
            std::cerr << "\n";
            printLineNum(curLine);
            ulong relHeight = std::count(s.c_str() + relPos.start, s.c_str() + relPos.end, '\n');
            ulong targetLineNum = std::max(errPos.lineNum + errHeight, relPos.lineNum + relHeight) + 1; //! No need to check useRelevant as its line is always 0 when unused
            const char* lastColor;
            for(; s[i] != '\0'; ++i) {

                // Calculate current color based on the current character index and print it if it differs form the last one
                const char* curColor = ((i >= errPos.start && i <= errPos.end) ? ansi::bold_red : ((i >= relPos.start && i <= relPos.end) ? ansi::magenta : ansi::black)).c_str();
                if(curColor != lastColor) {
                    std::cerr << curColor;
                    lastColor = curColor;
                }

                // Actually print the formatted character and line number. Manually break if the current line exceeds the last line visible in the code output
                std::cerr << formatChar(s[i]);
                if(s[i] == '\n') {
                    ++curLine;
                    if(curLine > targetLineNum) {
                        break;
                    }
                    printLineNum(curLine);
                    std::cerr << lastColor;
                }
            }
        }




        // Print the actual error after indenting it by 4 spaces
        std::cerr << ansi::bold_red << "\n\n    " << std::regex_replace(std::regex_replace(message, std::regex("\n"), "\n    "), std::regex("\033\\[0m"), ansi::bold_red) << "\n";
    }








    /**
     * @brief Reads a single source file and returns its contents as a string.
     *     Prints an error message if the file cannot be opened or doesn't exist.
     * @param fileName The path to the file.
     * @return The contents of the file as a string.
     */
    std::string readAndCheckFile(std::string fileName) {
        // Print an error if the file is a directory
        if(std::filesystem::is_directory(fileName)) {
            printError(
                utils::ErrType::PREPROCESSOR,
                ElmCoords(),
                "Could not open the specified file: \"" + fileName + "\": is a directory.\n" +
                "File path was interpreted as: " + ansi::white + "\"" + std::filesystem::canonical(fileName).string() + "\"" + ansi::reset + ".\n" +
                "Current working directory is: " + std::string(std::filesystem::current_path()) + "."
            );
            exit(1);
        }

        // Create file stream and print an error if the file cannot be opened
        std::ifstream f(fileName, std::ios::binary);
        if(!f) {
            printError(
                utils::ErrType::PREPROCESSOR,
                ElmCoords(),
                "Could not open file \"" + fileName + "\": " + std::strerror(errno) + ".\n" +
                "Current working directory is: " + std::string(std::filesystem::current_path()) + "."
            );
            exit(1);
        }


        // Read the contents of the file and return them as string
        return readFile(f);
    }








    /**
     * @brief Reads the contents of a file without performing any check or printing errors.
     * @param f The open file stream to read from.
     * @return The contents of the file as a string.
     */
    std::string readFile(std::ifstream &f) {
        f.seekg(0, std::ios::end);              // Move file pointer to the end of the file
        std::streamsize fileSize = f.tellg();   // Get file size in bytes
        f.seekg(0, std::ios::beg);              // Move file pointer back to index 0
        std::string r(fileSize, '\0');          // Preallocate the string
        f.read(&r[0], fileSize);                // Read the whole file at once
        return r;                               // Return the string value
    }
}


