import os, sys
#TODO read paths from config file



def run(mode:str):
    print()
    pf = mode[0]
    cf = mode[1]
    PF = 'Linux' if pf == 'l' else 'Windows'
    CF = 'Debug' if cf == 'd' else 'Release'

    npf =       'w' if pf == 'l' else 'l'
    ncf =       'r' if cf == 'd' else 'd'
    NPF = 'Windows' if pf == 'l' else 'Linux'
    NCF = 'Release' if cf == 'd' else 'Debug'

    with open('./.engine/.setup/.AtoE', 'r') as f: AtoE = f.read()




    #Update tasks.json
    with open('.vscode/tasks.json', 'w') as f:
        f.write(
            f'\n//################################################################'
            f'\n// This file was generated by { AtoE }/Tools/Setup/UpdateBuild'
            f'\n// Changes could be overwritten without notice'
            f'\n//################################################################'
            f'\n'
            f'\n'
            f'\n{{'
            f'\n    "version": "2.0.0",'
            f'\n    "tasks": ['
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": "{ PF }  |  { CF }  |  Build application\",'
            f'\n            "command": "{ AtoE }/Tools/Build/Build",'
            f'\n            "args": [ "-b=.engine/Application.lnxbuild.sh", "-m={ pf }{ cf }" ],'
            f'\n            "problemMatcher": [ "$gcc" ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }},'
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": "{ PF }  |  { CF }  |  Clear application\",'
            f'\n            "command": "{ AtoE }/Tools/Build/Build -c",'
            f'\n            "args": [ "clear" ],'
            f'\n            "problemMatcher": [ ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }},'
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": "{ PF }  |  { CF }  |  Build all\",'
            f'\n            "command": "{ AtoE }/Tools/Build/Build",'
            f'\n            "args": [ "-B=.engine/Application.lnxbuild.sh", "-m={ pf }{ cf }" ],'
            f'\n            "problemMatcher": [ "$gcc" ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }},'
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": "{ PF }  |  { CF }  |  Clear all\",'
            f'\n            "command": "{ AtoE }/Tools/Build/Build",'
            f'\n            "args": [ "-C" ],'
            f'\n            "problemMatcher": [ ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }},'
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": "{ PF }  |  { CF }  |  Clear && Rebuild\",'
            f'\n            "command": "sh",'
            f'\n            "args": [ "-c", "{ AtoE }/Tools/Build/Build -C && { AtoE }/Tools/Build/Build -B=.engine/Application.lnxbuild.sh -m={ pf }{ cf }" ],'
            f'\n            "problemMatcher": [ ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }},'
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": " > Switch to { NPF }",'
            f'\n            "command": "{ AtoE }/Tools/Setup/UpdateBuild",'
            f'\n            "args": [ "{ npf }{ cf }"],'
            f'\n            "problemMatcher": [ ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }},'
            f'\n        {{'
            f'\n            "type": "shell",'
            f'\n            "label": " > Switch to { NCF }",'
            f'\n            "command": "{ AtoE }/Tools/Setup/UpdateBuild",'
            f'\n            "args": [ "{ pf }{ ncf }"],'
            f'\n            "problemMatcher": [ ],'
            f'\n            "options": {{ "cwd": "${{workspaceFolder}}" }},'
            f'\n            "group": "build"'
            f'\n        }}'
            f'\n    ]'
            f'\n}}'
        )




    #Update debug macro
    with open('./.engine/.editor/.intellisense.hpp', 'w') as f:
        f.write(
            f'\n#pragma once'
            f'\n//####################################################################################'
            f'\n// This file was generated by { AtoE }/Tools/Setup/UpdateBuild.py'
            f'\n// Changes could be overwritten without notice'
            f'\n//####################################################################################'
            f'\n'
            f'\n'
            f'\n'
            f'\n'
            f'\n#ifndef __INTELLISENSE__'
            f'\n    #error "Something went wrong. This header should not be used during compilation"'
            f'\n#else'
            f'\n#    define LNX_{ "DBG" if cf == "d" else "RLS" }'
            f'\n#    define LNX_{ "LNX" if pf == "l" else "WDS" }'
            f'\n#endif'
        )








if(len(sys.argv) == 2): run(sys.argv[1])
else: raise Exception('Incorrect number of arguments')