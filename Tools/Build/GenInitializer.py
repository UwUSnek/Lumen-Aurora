import sys, re, os, pathlib, subprocess
from argparse import Namespace as ns




# Check argv length
if len(sys.argv) != 2:
    print(f'Invalid number of arguments: { len(sys.argv) }')
    sys.exit(-1)


# Check source file path
source = sys.argv[1]
if not os.path.exists(source):
    print(f'Unable to find source file "{ source }"')
    sys.exit(-2)




# Get the source code and parse out unnecessary whitespace and comments
code = subprocess.run(['g++', '-fpreprocessed', '-dD', '-E', source], capture_output = True, text = True).stdout
ncode:str = (
    re.sub(r' ?([()\[\]{}+*-\/.!<>=&^|?:%,;])( )?',  r'\g<1>',      # Remove spaces near opeartors
    re.sub(r'\n',       r'',                                        # Remove newlines
    re.sub(r' +',       r' ',                                       # Remove whitespace
    code.expandtabs(4)                                              # Convert tabs to spaces
))))


# Get init macro calls
r = list(m.groupdict() for m in re.finditer(r'(?:__init_var_def|__init_var_set_def)\((?P<type>.*?),(?P<name>.*?),(?P<fulln>.*?)\)', ncode))

# Write initializers header
if r != None and len(r) > 0:
    with open(f'src/Generated/.init/{ pathlib.Path(source).stem }.hpp', 'w') as f:
        f.write(
            f'\n//####################################################################################'
            f'\n// This file was generated by Tools/Build/GenInitializer'
            f'\n// Changes could be overwritten without notice'
            f'\n// !This file is not for humans'
            f'\n// !Do not include or compile it'
            f'\n//####################################################################################\n' +
            (''.join(
            f'\n\nnamespace { m["fulln"].rsplit("::", 1)[0] } {{'
            f'\n    namespace __pvt{{'
            f'\n        inline { m["type"] }& __init_{ m["name"] }_get();'
            f'\n    }}'
            f'\n    { m["type"] }& n = __pvt::__init_{ m["name"] }_get();'
            f'\n}}'
            for i, m in enumerate(r)))
        )