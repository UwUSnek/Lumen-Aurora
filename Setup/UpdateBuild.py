import os, re




def run(dir):

	def getPf():
		return "Linux" if opts.pf() == "l" else "Windows"
	def getTp():
		return "Debug" if opts.tp() == "d" else "Release"


	os.chdir(dir)
	import BuildOptions as opts

	#Open tasks file
	with open('./.vscode/tasks.json', 'r') as f:
		s = re.sub(r'("args"\s*:\s*\[\s*"mode=)[l|w][d|r|s]"', r'\g<1>' + opts.pf() + opts.tp() + '"',
			re.sub(r'("label"\s*:\s*")\w+  \|  \w+(  \|  Build \w+")', r'\g<1>' + getPf() + '  |  ' + getTp() + r'\g<2>',
			re.sub(r'("label"\s*:\s*" > Switch to )(Linux|Windows)("(.|\n)*?"LuxEngine\/Setup\/SetPlatform\.py"\s*,\s*")(l|w)"', r'\g<1>' + ("Windows" if opts.pf() == "l" else "Linux") + r'\g<3>' + ('w' if opts.pf() == 'l' else 'l') + '"',
			re.sub(r'("label"\s*:\s*" > Switch to )(Debug|Release)("(.|\n)*?"LuxEngine\/Setup\/SetType' r'\.py"\s*,\s*")(d|r)"', r'\g<1>' + ("Release" if opts.tp() == "d" else "Debug") + r'\g<3>' + ('r' if opts.tp() == 'd' else 'd') + '"',
		f.read()))))

	with open('./.vscode/tasks.json', 'w') as f:
		f.write(s)





	# 	#Find user build
	# 	while(f.read(1) != '['): pass
	# 	while(f.read(1) != '['): pass

	# 	#read user build
	# 	userBuild = ''
	# 	n = 1
	# 	while(n > 0):
	# 	    c = f.read(1)
	# 	    if(c == '['): n += 1
	# 	    elif(c == ']'): n -= 1
	# 	    userBuild += c

	# try:
	# 	plf = getPf()
	# except FileNotFoundError:
	# 	plf = ''
	# try:
	# 	typ = getTp()
	# except FileNotFoundError:
	# 	typ = ''



	# with open("./.vscode/tasks.json", "w") as f:
	# 	f.write(
	# 	'//This file was generated by the engine' 																'\n'
	# 	'//Only modify the options inside the "Build application" task args' 									'\n'
	# 	'//Other changes could be overwritten without notice or cause the program to behave uncorreclty' 	    '\n'
	# 	'{' 																									'\n'
	# 	'	"version": "2.0.0",'																				'\n'
	# 	'	"tasks": ['																							'\n'
	# 	'    	{'																								'\n'
	# 	'        	"type": "shell",'																			'\n'
	# 	'        	"label": "' + plf + '  |  ' + typ + '  |  Build Application",'								'\n'
	# 	'        	"command": "' + opts.enginePath() + '/Build/lux_g++",'										'\n'
	# 	'        	"args": [' + userBuild + ','																'\n'
	# 	'        	"problemMatcher": [ "$gcc" ],'																'\n'
	# 	'        	"options": { "cwd": "${workspaceFolder}" },'												'\n'
	# 	'        	"group": { "kind": "build", "isDefault": true }'											'\n'
	# 	'    	},'																								'\n'
	# 	'    	{'																								'\n'
	# 	'        	"type": "shell",' 																			'\n'
	# 	'        	"label": "' + plf + '  |  ' + typ + '  |  Build LuxEngine\",' 								'\n'
	# 	'        	"command": "/usr/bin/g++",'																	'\n'
	# 	'        	"args": ['																				 	'\n'
	# 	'            	//Source files' 																		'\n'
	# 	'		        	"-p", "-xc++", "' + opts.enginePath() + '/LuxEngine/LuxEngine_build.cpp",' 			'\n' + #FIXME DONT USE -p IN RELEASE
	# 	                    (opts.getDebugOptions() if opts.tp() == "d" else opts.getReleaseOptions()) + ',' 	'\n'
	# 	'               //Engine' 																				'\n'
	# 	'                   "-std=c++2a", "-mavx", "-pipe", "-pthread",' 										'\n'
	# 	'                  	"-I' + opts.enginePath() + '",' 													'\n'
	# 	'					"-Wall", ' 																			'\n'
	# 	'					"-Wclobbered", "-Wcast-function-type", "-Wdeprecated-copy", "-Wempty-body", "-Wignored-qualifiers", "-Wimplicit-fallthrough=3", '					 		'\n'
	# 	'					"-Wstring-compare", "-Wredundant-move", "-Wtype-limits", "-Wuninitialized", "-Wshift-negative-value", "-Wunused-but-set-parameter", ' 						'\n'
	# 	'					"-Wcast-align", "-Wcast-qual", "-Wctor-dtor-privacy", "-Wdisabled-optimization", "-Wformat=2", "-Winit-self", "-Wlogical-op", "-Wmissing-include-dirs", ' 	'\n'
	# 	'					"-Wnoexcept", "-Woverloaded-virtual", "-Wredundant-decls", "-Wshadow", "-Wsign-conversion", "-Wsign-promo", ' 												'\n'
	# 	'					"-Wstrict-null-sentinel", "-Wstrict-overflow=5", "-Wswitch-default", "-Wundef", ' 	'\n' +
	# 	                	opts.getEngineDeps() + ',' 													      + '\n'
	# 	'              	//Output'																				'\n'
	# 	'				"-c", "-o", "' + opts.enginePath() + '/Build/' + plf + '/LuxEngine' + typ + '"' 		'\n'
	# 	'          	],' 																						'\n'
	# 	'          	"problemMatcher": [ "$gcc" ],' 																'\n'
	# 	'          	"options": { "cwd": "${workspaceFolder}" },' 												'\n'
	# 	'          	"group": { "kind": "build", "isDefault": true }' 											'\n'
	# 	'      	},' 																							'\n'
	# 	'      	{' 																								'\n'
	# 	'          	"type": "shell",' 																			'\n'
	# 	'          	"label": " > Switch to ' + ("Windows" if opts.pf() == "l" else "Linux") + '",' 				'\n'
	# 	'          	"command": "python3",' 																		'\n'
	# 	'          	"args": [' 																					'\n'
	# 	'              	"' + opts.enginePath() + '/Setup/SetPlatform.py",' 										'\n'
	# 	'              	"' + ("w" if opts.pf() == "l" else "l") + '",'											'\n'
	# 	'          	],' 																						'\n'
	# 	'          	"problemMatcher": [ ],'																		'\n'
	# 	'          	"options": { "cwd": "${workspaceFolder}" },' 												'\n'
	# 	'          	"group": { "kind": "build", "isDefault": true }' 											'\n'
	# 	'      	},' 																							'\n'
	# 	'      	{' 																								'\n'
	# 	'          	"type": "shell",' 																			'\n'
	# 	'          	"label": " > Switch to ' + ("Release" if opts.tp() == "d" else "Debug") + '",' 				'\n'
	# 	'          	"command": "python3",' 																		'\n'
	# 	'          	"args": [' 																					'\n'
	# 	'              	"' + opts.enginePath() + '/Setup/SetType.py",' 											'\n'
	# 	'              	"' + ("r" if opts.tp() == "d" else "d") + '"' 											'\n'
	# 	'          	],' 																						'\n'
	# 	'          	"problemMatcher": [ ],' 																	'\n'
	# 	'          	"options": { "cwd": "${workspaceFolder}" },' 												'\n'
	# 	'          	"group": { "kind": "build", "isDefault": true }' 											'\n'
	# 	'      	}' 																								'\n'
	# 	'  	]' 																									'\n'
	# 	'}'																								        '\n'
	# )