
#version 450

#define WORKGROUP_SIZE 32			//The x and y size of the workgroup
#define gx gl_GlobalInvocationID.x	//The x coordinate of the shader call. This does not depend on the workgroup size
#define gy gl_GlobalInvocationID.y	//The y coordinate of the shader call. This does not depend on the workgroup size
#define colToInt(v) ((v.a) << 24) | ((v.b & 0xFF) << 16) | ((v.g & 0xFF) << 8) | (v.r & 0xFF)




layout (local_size_x = WORKGROUP_SIZE * WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

layout(std430, binding = 0) buffer colorOutput_{ uint colorOutput[]; };

layout(std430, binding = 1) buffer windowSize_{ 
	uint width;
	uint height; 
};

layout(std430, binding = 2) buffer lineData_{ 
	//16
	ivec2 p0; //0		//4
	ivec2 p1; //8		//12
	//16
	vec4 col0;		//16
	//16
	vec4 col1;		//32
	//8
	float wd0;		//48
	float wd1;		//52
};








void setPixelColor(vec2 pos, vec4 col){
	colorOutput[uint(pos.y) * width + uint(pos.x)] = colToInt(uvec4(uint(col.r*255), uint(col.g*255), uint(col.b*255), uint(col.a*255)));
}



void drawLine(){ 
	const vec2 pm = {1, -1};	//Plus-minus vector for fast vec2 operations
	const vec2 mp = {-1, 1};	//Minus-plus vector for fast vec2 operations
	const vec2 zv = {0, 0};		//Zero vec2
	const vec2 ov = {1, 1};		//One vec2

	//TODO add special cases: vertical, horizontal
	//TODO antialiasing 


	

	//Calculate length and interpolated values
	float lLen = distance(p0, p1);					//Length of the line
	vec2 lDist = abs(p0 - p1);						//2D distance between the line points
	float lFac = 1 / (lLen / gx);					//Factor of the position of gx in the line length

	vec4 col = mix(col0, col1, lFac);				//Interpolated color
	float wd = mix(wd0, wd1, lFac);					//Interpolated width




	//Find the perpendicular sub segment points
	vec2 dir = sign(p1 - p0);						//Direction of the line
	vec2 lNvec = dir * ((wd / 2) * normalize(lDist));	//Base segment point offset (normalized distance vector * half width)

	vec2 lRpos = p0 + (dir * (lDist * lFac));		//Position relative to the first point of the line
	vec2 s0 =  (pm * (lNvec.yx)) + lRpos;	//Fist point of the segment
	vec2 s1 =  (mp * (lNvec.yx)) + lRpos;	//Second point of the segment
	



	//Draw the sub segment
	float sLen = distance(s0, s1);					//Length of the segment
	for(float i = 0; i < sLen; i++){				//For the segment length	
		setPixelColor(									//Set the current pixel with the interpolated color:
			((pm * (dir.x * dir.y)) * (dir *				//Invert position if x and y have different directions
			(abs(s0 - s1) * (1 / (sLen / i))))				//2D segment distance * segment factor)
			+ s1) , col										//+ segment base point
		);	
	}

//	//debug
//	setPixelColor(s0,vec4(0,1,0,1));
//	setPixelColor(s1,vec4(0,1,0,1));
//
//	setPixelColor(p0,vec4(0,1,0,1));
//	setPixelColor(p1,vec4(0,1,0,1));
}




void main() {
	//Yeet unnecessary calls
	if(gx >= distance(vec2(p0.x, p0.y), vec2(p1.x, p1.y))) return;
//	if(x >= width || y >= height) return;		//Out of render
	//TODO move null check to CPU
	if((wd0 == 0 && wd1 == 0) || (col0.a == 0 && col1.a == 0)) return;	//Null line

	drawLine();
}













//void drawLine(){ 
//	float dx = distance(p0.x,p1.x);	//x distance
//	float dy = distance(p0.y,p1.y);	//y distance
//	int minx = min(p0.x,p1.x);		//Minimum x
//	int miny = min(p0.y,p1.y);		//Minimum y
//
//
//	//TODO add special cases: vertical, horizontal
//	//TODO add vertical execution
//	//TODO inverse direction lines (test already in cpp)
//	//TODO antialiasing 
//
//
//	
//	vec2 fac = vec2(1 / (dx / gx), 1- (1 / (dx / gx)));	//Distance from the first and second point
//	vec4 col = col0 * fac[0] + col1 * fac[1];			//Interpolated color
//	float wd = wd0 * fac[0] + wd1 * fac[1];				//Interpolated width
//	float y = dy * fac[0];
//	int i, j;						//Current y
//
//	float hWd = wd / 2;									//Half width
//	vec2 nVec = vec2(dx, dy) / max(dx, dy);				//Normalized distance vector
//	vec2 s0 = vec2(minx + (hWd * nVec.y) + gx, miny - (hWd * nVec.x) + y);	//First point of the perpendicular segment
//	vec2 s1 = vec2(minx - (hWd * nVec.y) + gx, miny + (hWd * nVec.x) + y);	//Second point of the perpendicular segment
//	
//
//
//	float sLen = length(distance(s0, s1));							//Length of the segment
//	vec2 sDist = vec2(distance(s0.x, s1.x), distance(s0.y, s1.y));	//2D distance of the segment points
//	for(float i = 0; i < sLen; i+=0.4){
//		float sfac = 1 / (sLen / i);					//Factor of the position of I in the segment length
//		setPixelColor(uvec2(uint((sDist.x * sfac) + s1.x), uint(s1.y - (sDist.y * sfac))), col);
//	}
//}
