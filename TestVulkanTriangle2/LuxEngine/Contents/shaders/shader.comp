
#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH windowSize[0]
#define HEIGHT windowSize[1]
#define WORKGROUP_SIZE 32
#define x gl_GlobalInvocationID.x
#define y gl_GlobalInvocationID.y





layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;


layout(std430, binding = 0) buffer imageDataBuffer{
	uint imageData[];
};

layout(std430, binding = 1) buffer vertexBuffer{
	uint vertices[];
};

layout(std430, binding = 1) buffer windowSize_{
	uint windowSize[];
};




void main() {
	//Yeet unnecessary calls
	if(x > WIDTH || y > HEIGHT) return;


	uvec4 color = uvec4(x,0,y,255);
//	uvec4 color = imageData[y*WIDTH + x] + uvec4(1,0,0,1);


//	//Store the pixel in the buffer. 4 chars as an uint32
	imageData[y*WIDTH + x] = ((color.a & 0xFF) << 24) | ((color.r & 0xFF) << 16) | ((color.g & 0xFF) << 8) | ((color.b & 0xFF) << 0);


//imageData[gl_GlobalInvocationID.y*WIDTH + gl_GlobalInvocationID.x] = imageData[gl_GlobalInvocationID.y*WIDTH + gl_GlobalInvocationID.x] + 1;
}