import sys, os

enginePath_ = os.path.abspath('.')
os.chdir(sys.argv[1])
import importlib.util
spec = importlib.util.spec_from_file_location("BuildOptions.BuildOptions", enginePath_ + '/Build/BuildOptions/BuildOptions.py')
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)





def getPf():
    return "Linux" if foo.pf() == "l" else "Windows"
def getTp():
    return "Debug" if foo.tp() == "d" else "Release"




f = open("./.vscode/tasks.json", "r")

while(f.read(1) != '['):
    None
while(f.read(1) != '['):
    None

userBuild = ''
n = 1
while(n > 0):
    c = f.read(1)
    if(c == '['): n += 1
    elif(c == ']'): n -= 1
    userBuild += c

f.close()




f = open("./.vscode/tasks.json", "w")
f.write("""
//This file was generated by the engine
//Only modify the options inside the "Build application" task args
//Other changes could be overwritten without any advise or cause the program to behave uncorreclty
{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "shell",
            "label": \"""" + getPf() + "  |  " + getTp() + """  |  Build Application",
            "command": \"""" + foo.enginePath() + """/Build/lux_g++",
            "args": [""" + userBuild + """,
            "problemMatcher": [ "$gcc" ],
            "options": { "cwd": "${workspaceFolder}" },
            "group": { "kind": "build", "isDefault": true }
        },
        {
            "type": "shell",
            "label": \"""" + getPf() + "  |  " + getTp() + """  |  Build LuxEngine\",
            "command": "/usr/bin/g++",
            "args": [
                //Source files
		            "-xc++", \"""" + foo.enginePath() + """/LuxEngine/LuxEngineBuild.cpp.build",\n""" +\
                    (foo.getDebugOptions() if foo.tp() == "d" else foo.getReleaseOptions()) + """,
                //Engine
                    "-std=c++2a", "-mavx", "-pipe", "-pthread",
                    "-I""" + foo.enginePath() + """\",
                    "-Wall",\n""" +\
                    foo.getEngineDeps() + """,
                //Output
					"-c", "-o", \"""" + foo.enginePath() + '/Build/' + getPf() + '/LuxEngine' + getTp() + """\"
            ],
            "problemMatcher": [ "$gcc" ],
            "options": { "cwd": "${workspaceFolder}" },
            "group": { "kind": "build", "isDefault": true }
        },
        {
            "type": "shell",
            "label": " > Switch to """ + ("Windows" if foo.pf() == "l" else "Linux") + """\",
            "command": "python3",
            "args": [
                \"""" + foo.enginePath() + """/Build/SetPlatform.py",
                \"""" + ("w" if foo.pf() == "l" else "l") + """\",
            ],
            "problemMatcher": [ ],
            "options": { "cwd": "${workspaceFolder}" },
            "group": { "kind": "build", "isDefault": true }
        },
        {
            "type": "shell",
            "label": " > Switch to """ + ("Release" if foo.tp() == "d" else "Debug") + """\",
            "command": "python3",
            "args": [
                \"""" + foo.enginePath() + """/Build/SetType.py",
                \"""" + ("r" if foo.tp() == "d" else "d") + """\"
            ],
            "problemMatcher": [ ],
            "options": { "cwd": "${workspaceFolder}" },
            "group": { "kind": "build", "isDefault": true }
        }
    ]
}\n""")
f.close()
