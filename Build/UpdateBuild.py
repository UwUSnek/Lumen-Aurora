import sys, os


def run(dir):

	def getPf():
		return "Linux" if foo.pf() == "l" else "Windows"
	def getTp():
		return "Debug" if foo.tp() == "d" else "Release"


	enginePath_ = os.path.abspath('.')
	os.chdir(dir)
	import Build.BuildOptions.BuildOptions as foo
	#import importlib.util
	# spec = importlib.util.spec_from_file_location("BuildOptions.BuildOptions", enginePath_ + '/Build/BuildOptions/BuildOptions.py')
	# foo = importlib.util.module_from_spec(spec)
	# spec.loader.exec_module(foo)

	#Open tasks file
	with open("./.vscode/tasks.json", "r") as f:

		#Find user build
		while(f.read(1) != '['): pass
		while(f.read(1) != '['): pass

		#read user build
		userBuild = ''
		n = 1
		while(n > 0):
		    c = f.read(1)
		    if(c == '['): n += 1
		    elif(c == ']'): n -= 1
		    userBuild += c

	try:
		plf = getPf()
	except FileNotFoundError:
		plf = ''
	try:
		typ = getTp()
	except FileNotFoundError:
		typ = ''



	with open("./.vscode/tasks.json", "w") as f:
		f.write("""
		//This file was generated by the engine
		//Only modify the options inside the "Build application" task args
		//Other changes could be overwritten without any advise or cause the program to behave uncorreclty
		{
		    "version": "2.0.0",
		    "tasks": [
		        {
		            "type": "shell",
		            "label": \"""" + plf + "  |  " + typ + """  |  Build Application",
		            "command": \"""" + foo.enginePath() + """/Build/lux_g++",
		            "args": [""" + userBuild + """,
		            "problemMatcher": [ "$gcc" ],
		            "options": { "cwd": "${workspaceFolder}" },
		            "group": { "kind": "build", "isDefault": true }
		        },
		        {
		            "type": "shell",
		            "label": \"""" + plf + "  |  " + typ + """  |  Build LuxEngine\",
		            "command": "/usr/bin/g++",
		            "args": [
		                //Source files
				            "-xc++", \"""" + foo.enginePath() + """/LuxEngine/LuxEngine_build.cpp",\n""" +\
		                    (foo.getDebugOptions() if foo.tp() == "d" else foo.getReleaseOptions()) + """,
		                //Engine
		                    "-std=c++2a", "-mavx", "-pipe", "-pthread",
		                    "-I""" + foo.enginePath() + """\",
		                    "-Wall",\n""" +\
		                    foo.getEngineDeps() + """,
		                //Output
							"-c", "-o", \"""" + foo.enginePath() + '/Build/' + plf + '/LuxEngine' + typ + """\"
		            ],
		            "problemMatcher": [ "$gcc" ],
		            "options": { "cwd": "${workspaceFolder}" },
		            "group": { "kind": "build", "isDefault": true }
		        },
		        {
		            "type": "shell",
		            "label": " > Switch to """ + ("Windows" if foo.pf() == "l" else "Linux") + """\",
		            "command": "python3",
		            "args": [
		                \"""" + foo.enginePath() + """/Build/SetPlatform.py",
		                \"""" + ("w" if foo.pf() == "l" else "l") + """\",
		            ],
		            "problemMatcher": [ ],
		            "options": { "cwd": "${workspaceFolder}" },
		            "group": { "kind": "build", "isDefault": true }
		        },
		        {
		            "type": "shell",
		            "label": " > Switch to """ + ("Release" if foo.tp() == "d" else "Debug") + """\",
		            "command": "python3",
		            "args": [
		                \"""" + foo.enginePath() + """/Build/SetType.py",
		                \"""" + ("r" if foo.tp() == "d" else "d") + """\"
		            ],
		            "problemMatcher": [ ],
		            "options": { "cwd": "${workspaceFolder}" },
		            "group": { "kind": "build", "isDefault": true }
		        }
		    ]
		}\n""")