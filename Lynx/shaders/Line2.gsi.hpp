
//####################################################################################
// This file was generated by Lynx/shaders/GlslToCpp.py
// Changes could be overwritten without notice
//####################################################################################

#pragma once
#include "Lynx/Core/Render/Shaders/ShaderInterface_t.hpp"



namespace lnx::shd{
    struct Line2 : public ShaderInterface_b {
        static ShaderInterface_b::Layout layout;
        static uint32 pipelineIndex;


		struct outcol_t : public ShaderElm_b<eStorage> {
		    outcol_t() {
		        ShaderElm_b::bind = 0;
		    }
		} outcol;


		struct wsize_t : public ShaderElm_b<eStorage> {
		    wsize_t() {
		        ShaderElm_b::bind = 1;
		    }
		} wsize;


		struct zbuff_t : public ShaderElm_b<eStorage> {
		    zbuff_t() {
		        ShaderElm_b::bind = 2;
		    }
		} zbuff;


		struct _data_t : public ShaderElm_b<eUniform> {
		    _data_t() {
		        ShaderElm_b::vdata.realloc(256);
		        ShaderElm_b:: data.realloc(256);
		        ShaderElm_b::bind = 3;
		    }
		alwaysInline f32v2& fp0() { return *(f32v2*)ShaderElm_b::data; }
		alwaysInline f32v2& fp1() { return *(f32v2*)(ShaderElm_b::data + 8); }
		alwaysInline f32v4& col0() { return *(f32v4*)(ShaderElm_b::data + 16); }
		alwaysInline f32v4& col1() { return *(f32v4*)(ShaderElm_b::data + 32); }
		alwaysInline f32& wd0() { return *(f32*)(ShaderElm_b::data + 48); }
		alwaysInline f32& wd1() { return *(f32*)(ShaderElm_b::data + 52); }
		alwaysInline u32& ID() { return *(u32*)(ShaderElm_b::data + 56); }
		} _data;


		void create(vram::ptr<f32v4, eVRam, eStorage> pOutcol, vram::ptr<u32v2, eVRam, eStorage> pWsize, vram::ptr<u32, eVRam, eStorage> pZbuff, const u32v3 vGroupCount, core::RenderCore& pRenderCore);
		void createDescriptorSets();
		void createCommandBuffers(const u32v3 vGroupCount, core::RenderCore& pRenderCore);
		void updateCommandBuffers(const u32v3 vGroupCount, core::RenderCore& pRenderCore);
		void destroy();
    };
}//TODO remove local data in external bindings