#version 450

{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (7, 8), 'type': 'ws'}
{'val': 'rad', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (19, 20), 'type': 'ws'}
{'val': '_deg', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (20, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (25, 26), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 rad(any_f32 _deg);', 'range': (26, 27), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (7, 8), 'type': 'ws'}
{'val': 'deg', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (19, 20), 'type': 'ws'}
{'val': '_rad', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (20, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (25, 26), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 deg(any_f32 _rad);', 'range': (26, 27), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (0, 7), 'type': 'id'}
{'val': '   ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (7, 10), 'type': 'ws'}
{'val': 'sin', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (10, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (21, 22), 'type': 'ws'}
{'val': '_angle', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (22, 28), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (28, 29), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (29, 30), 'type': 'sc'}
{'val': '  ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (30, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (32, 39), 'type': 'id'}
{'val': '   ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (39, 42), 'type': 'ws'}
{'val': 'cos', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (42, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (53, 54), 'type': 'ws'}
{'val': '_angle', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (54, 60), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (60, 61), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (61, 62), 'type': 'sc'}
{'val': '  ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (62, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (64, 71), 'type': 'id'}
{'val': '   ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (71, 74), 'type': 'ws'}
{'val': 'tan', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (74, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (85, 86), 'type': 'ws'}
{'val': '_angle', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (86, 92), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (92, 93), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (93, 94), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32   sin(any_f32 _angle);  any_f32   cos(any_f32 _angle);  any_f32   tan(any_f32 _angle);', 'range': (94, 95), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (0, 7), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (7, 9), 'type': 'ws'}
{'val': 'asin', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (9, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (32, 39), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (39, 41), 'type': 'ws'}
{'val': 'acos', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (41, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (57, 58), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (58, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (64, 71), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (71, 73), 'type': 'ws'}
{'val': 'atan', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (73, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_y_over_n', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (86, 95), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (95, 96), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (96, 97), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32  asin(any_f32 _n);      any_f32  acos(any_f32 _n);      any_f32  atan(any_f32 _y_over_n);', 'range': (97, 98), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (7, 9), 'type': 'ws'}
{'val': 'sinh', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (9, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (39, 41), 'type': 'ws'}
{'val': 'cosh', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (41, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (58, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (64, 71), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (71, 73), 'type': 'ws'}
{'val': 'tanh', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (73, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (89, 90), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32  sinh(any_f32 _n);      any_f32  cosh(any_f32 _n);      any_f32  tanh(any_f32 _n);', 'range': (90, 91), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'asinh', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (8, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'acosh', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (40, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (58, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (64, 71), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (71, 72), 'type': 'ws'}
{'val': 'atanh', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (72, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (89, 90), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 asinh(any_f32 _n);      any_f32 acosh(any_f32 _n);      any_f32 atanh(any_f32 _n);', 'range': (90, 91), 'type': 'nl'}
{'val': '                                                                ', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (0, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (64, 71), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (71, 73), 'type': 'ws'}
{'val': 'atan', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (73, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_y', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (89, 90), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (90, 97), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (97, 98), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (98, 100), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (100, 101), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (101, 102), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': '                                                                any_f32  atan(any_f32 _y, any_f32 _n);', 'range': (102, 103), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (7, 8), 'type': 'ws'}
{'val': 'pow', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (19, 20), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (31, 32), 'type': 'ws'}
{'val': '_e', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (35, 36), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 pow(any_f32 _b, any_f32 _e);', 'range': (36, 37), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': '   ', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (7, 10), 'type': 'ws'}
{'val': 'exp', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (10, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': '   ', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (39, 42), 'type': 'ws'}
{'val': 'log', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (42, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32   exp(any_f32 _n);      any_f32   log(any_f32 _n);', 'range': (58, 59), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (7, 9), 'type': 'ws'}
{'val': 'exp2', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (9, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (39, 41), 'type': 'ws'}
{'val': 'log2', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (41, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32  exp2(any_f32 _n);      any_f32  log2(any_f32 _n);', 'range': (58, 59), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (7, 9), 'type': 'ws'}
{'val': 'sqrt', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (9, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (32, 39), 'type': 'id'}
{'val': '  ', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (39, 41), 'type': 'ws'}
{'val': 'sqrt', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (41, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32  sqrt(any_f32 _n);      any_f64  sqrt(any_f64 _n);', 'range': (58, 59), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'isqrt', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (8, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'isqrt', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (40, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 isqrt(any_f32 _n);      any_f64 isqrt(any_f64 _n);', 'range': (58, 59), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'abs', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (19, 20), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (20, 22), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (23, 24), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (24, 32), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'sign', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (40, 44), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (45, 52), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (52, 53), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (53, 55), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (55, 56), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (56, 57), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_i32 abs(any_i32 _n);        any_i32 sign(any_i32 _n);', 'range': (57, 58), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'abs', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (19, 20), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (20, 22), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (23, 24), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (24, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'sign', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (40, 44), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (45, 52), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (52, 53), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (53, 55), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (55, 56), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (56, 57), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (57, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (64, 71), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (71, 72), 'type': 'ws'}
{'val': 'fract', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (72, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (89, 90), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 abs(any_f32 _n);        any_f32 sign(any_f32 _n);       any_f32 fract(any_f32 _n);', 'range': (90, 91), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'abs', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (19, 20), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (20, 22), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (23, 24), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (24, 32), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'sign', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (40, 44), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (45, 52), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (52, 53), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (53, 55), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (55, 56), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (56, 57), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (57, 64), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (64, 71), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (71, 72), 'type': 'ws'}
{'val': 'fract', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (72, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (89, 90), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 abs(any_f64 _n);        any_f64 sign(any_f64 _n);       any_f64 fract(any_f64 _n);', 'range': (90, 91), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'floor', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (8, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'ceilf', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (40, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (58, 64), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (64, 71), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (71, 72), 'type': 'ws'}
{'val': 'trunc', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (72, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (89, 90), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (90, 96), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (96, 103), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (103, 104), 'type': 'ws'}
{'val': 'round', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (104, 109), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (109, 110), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (110, 117), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (117, 118), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (118, 120), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (120, 121), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (121, 122), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (122, 128), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (128, 135), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (135, 136), 'type': 'ws'}
{'val': 'roundEven', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (136, 145), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (145, 146), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (146, 153), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (153, 154), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (154, 156), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (156, 157), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (157, 158), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 floor(any_f32 _n);      any_f32 ceilf(any_f32 _n);      any_f32 trunc(any_f32 _n);      any_f32 round(any_f32 _n);      any_f32 roundEven(any_f32 _n);', 'range': (158, 159), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'floor', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (8, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (14, 21), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (21, 22), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (22, 24), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (25, 26), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (26, 32), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (39, 40), 'type': 'ws'}
{'val': 'ceilf', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (40, 45), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (45, 46), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (46, 53), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (53, 54), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (54, 56), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (56, 57), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (57, 58), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (58, 64), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (64, 71), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (71, 72), 'type': 'ws'}
{'val': 'trunc', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (72, 77), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (78, 85), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (85, 86), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (86, 88), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (89, 90), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (90, 96), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (96, 103), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (103, 104), 'type': 'ws'}
{'val': 'round', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (104, 109), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (109, 110), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (110, 117), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (117, 118), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (118, 120), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (120, 121), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (121, 122), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (122, 128), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (128, 135), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (135, 136), 'type': 'ws'}
{'val': 'roundEven', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (136, 145), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (145, 146), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (146, 153), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (153, 154), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (154, 156), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (156, 157), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (157, 158), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 floor(any_f64 _n);      any_f64 ceilf(any_f64 _n);      any_f64 trunc(any_f64 _n);      any_f64 round(any_f64 _n);      any_f64 roundEven(any_f64 _n);', 'range': (158, 159), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (7, 8), 'type': 'ws'}
{'val': 'mod', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (19, 20), 'type': 'ws'}
{'val': '_x', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (24, 31), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (31, 32), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (32, 33), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (33, 42), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (42, 49), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (49, 50), 'type': 'ws'}
{'val': 'mod', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (50, 53), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (53, 54), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (54, 61), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (61, 62), 'type': 'ws'}
{'val': '_x', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (62, 64), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (64, 65), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (65, 66), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (66, 73), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (73, 74), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (74, 75), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (75, 84), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (84, 91), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (91, 92), 'type': 'ws'}
{'val': 'modf', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (92, 96), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (96, 97), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (97, 104), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (104, 105), 'type': 'ws'}
{'val': '_x', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (105, 107), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (107, 108), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (108, 109), 'type': 'ws'}
{'val': 'out', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (109, 112), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (112, 113), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (113, 120), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (120, 121), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (121, 123), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (123, 124), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (124, 125), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x, any_f32);         any_f64 mod(any_f64 _x, any_f64);         any_f64 modf(any_f64 _x, out any_f64 _i);', 'range': (125, 126), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (7, 8), 'type': 'ws'}
{'val': 'mod', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (19, 20), 'type': 'ws'}
{'val': '_x', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (23, 28), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (28, 31), 'type': 'tn'}
{'val': ')', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (31, 32), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (32, 33), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (33, 42), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (42, 49), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (49, 50), 'type': 'ws'}
{'val': 'mod', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (50, 53), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (53, 54), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (54, 61), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (61, 62), 'type': 'ws'}
{'val': '_x', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (62, 64), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (64, 65), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (65, 70), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (70, 73), 'type': 'tn'}
{'val': ')', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (73, 74), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (74, 75), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (75, 84), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (84, 91), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (91, 92), 'type': 'ws'}
{'val': 'modf', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (92, 96), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (96, 97), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (97, 104), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (104, 105), 'type': 'ws'}
{'val': '_x', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (105, 107), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (107, 108), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (108, 109), 'type': 'ws'}
{'val': 'out', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (109, 112), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (112, 113), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (113, 120), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (120, 121), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (121, 123), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (123, 124), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (124, 125), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 mod(any_f32 _x,     f32);         any_f64 mod(any_f64 _x,     f64);         any_f64 modf(any_f64 _x, out any_f32 _i);', 'range': (125, 126), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_i64', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (31, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (66, 67), 'type': 'ws'}
{'val': 'any_i64', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (67, 74), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (111, 112), 'type': 'ws'}
{'val': 'any_i64', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (112, 119), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (156, 157), 'type': 'ws'}
{'val': 'any_i64', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (157, 164), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (170, 171), 'type': 'ws'}
{'val': 'any_i64', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (171, 178), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, any_i64 _b);       any_u32 max(any_u32 _a, any_i64 _b);       any_u32 clamp(any_u32 _a, any_i64 _b);         any_u32 mix(any_u32 _n, any_i64 _min, any_i64 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (31, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (66, 67), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (67, 74), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (111, 112), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (112, 119), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (156, 157), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (157, 164), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (170, 171), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (171, 178), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, any_i32 _b);       any_i32 max(any_i32 _a, any_i32 _b);       any_i32 clamp(any_i32 _a, any_i32 _b);         any_i32 mix(any_i32 _n, any_i32 _min, any_i32 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (31, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (66, 67), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (67, 74), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (111, 112), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (112, 119), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (156, 157), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (157, 164), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (170, 171), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (171, 178), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, any_f32 _b);       any_f32 max(any_f32 _a, any_f32 _b);       any_f32 clamp(any_f32 _a, any_f32 _b);         any_f32 mix(any_f32 _n, any_f32 _min, any_f32 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (31, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (66, 67), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (67, 74), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (111, 112), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (112, 119), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (156, 157), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (157, 164), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (170, 171), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (171, 178), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, any_f64 _b);       any_d64 max(any_f64 _a, any_f64 _b);       any_d64 clamp(any_f64 _a, any_f64 _b);         any_d64 mix(any_f64 _n, any_f64 _min, any_f64 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (24, 27), 'type': 'tn'}
{'val': '     ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (27, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (66, 71), 'type': 'ws'}
{'val': 'u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (71, 74), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (111, 116), 'type': 'ws'}
{'val': 'u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (116, 119), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (156, 161), 'type': 'ws'}
{'val': 'u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (161, 164), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (170, 175), 'type': 'ws'}
{'val': 'u32', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (175, 178), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_u32 min(any_u32 _a, u32     _b);       any_u32 max(any_u32 _a,     u32 _b);       any_u32 clamp(any_u32 _a,     u32 _b);         any_u32 mix(any_u32 _n,     u32 _min,     u32 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (24, 27), 'type': 'tn'}
{'val': '     ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (27, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (66, 71), 'type': 'ws'}
{'val': 'i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (71, 74), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (111, 116), 'type': 'ws'}
{'val': 'i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (116, 119), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (156, 161), 'type': 'ws'}
{'val': 'i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (161, 164), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (170, 175), 'type': 'ws'}
{'val': 'i32', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (175, 178), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_i32 min(any_i32 _a, i32     _b);       any_i32 max(any_i32 _a,     i32 _b);       any_i32 clamp(any_i32 _a,     i32 _b);         any_i32 mix(any_i32 _n,     i32 _min,     i32 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (24, 27), 'type': 'tn'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (27, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (66, 71), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (71, 74), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (111, 116), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (116, 119), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (156, 161), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (161, 164), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (170, 175), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (175, 178), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 min(any_f32 _a, f32     _b);       any_f32 max(any_f32 _a,     f32 _b);       any_f32 clamp(any_f32 _a,     f32 _b);         any_f32 mix(any_f32 _n,     f32 _min,     f32 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (7, 8), 'type': 'ws'}
{'val': 'min', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (23, 24), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (24, 27), 'type': 'tn'}
{'val': '     ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (27, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (32, 34), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (35, 36), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (36, 43), 'type': 'ws'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (43, 50), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (50, 51), 'type': 'ws'}
{'val': 'max', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (51, 54), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (55, 62), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (62, 63), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (63, 65), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (65, 66), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (66, 71), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (71, 74), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (74, 75), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (75, 77), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (77, 78), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (78, 79), 'type': 'sc'}
{'val': '       ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (79, 86), 'type': 'ws'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (86, 93), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (93, 94), 'type': 'ws'}
{'val': 'clamp', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (94, 99), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (107, 108), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (108, 110), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (110, 111), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (111, 116), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (116, 119), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (119, 120), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (120, 122), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (122, 123), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (123, 124), 'type': 'sc'}
{'val': '         ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (124, 133), 'type': 'ws'}
{'val': 'any_d64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (133, 140), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (140, 141), 'type': 'ws'}
{'val': 'mix', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (141, 144), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (144, 145), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (145, 152), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (152, 153), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (153, 155), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (155, 156), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (156, 161), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (161, 164), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (164, 165), 'type': 'ws'}
{'val': '_min', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (165, 169), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (169, 170), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (170, 175), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (175, 178), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (178, 179), 'type': 'ws'}
{'val': '_max', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (179, 183), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (183, 184), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (184, 185), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_d64 min(any_f64 _a, f64     _b);       any_d64 max(any_f64 _a,     f64 _b);       any_d64 clamp(any_f64 _a,     f64 _b);         any_d64 mix(any_f64 _n,     f64 _min,     f64 _max);', 'range': (185, 186), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (0, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (37, 38), 'type': 'ws'}
{'val': '_which', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (38, 44), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32(any_f32 _a, any_f32 _b, any_b _which);', 'range': (46, 47), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (0, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (37, 38), 'type': 'ws'}
{'val': '_which', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (38, 44), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64(any_f64 _a, any_f64 _b, any_b _which);', 'range': (46, 47), 'type': 'nl'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (0, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (37, 38), 'type': 'ws'}
{'val': '_which', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (38, 44), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_u32(any_u32 _a, any_u32 _b, any_b _which);', 'range': (46, 47), 'type': 'nl'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (0, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (37, 38), 'type': 'ws'}
{'val': '_which', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (38, 44), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_i32(any_i32 _a, any_i32 _b, any_b _which);', 'range': (46, 47), 'type': 'nl'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (0, 5), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (5, 6), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '    ', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (6, 10), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (10, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '   ', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (19, 22), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (22, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (37, 38), 'type': 'ws'}
{'val': '_which', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (38, 44), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_b(    any_b _a,   any_b _b, any_b _which);', 'range': (46, 47), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (8, 12), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (12, 13), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (13, 20), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (20, 21), 'type': 'ws'}
{'val': '_edge', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (21, 26), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (26, 27), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (27, 28), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (28, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (35, 36), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (36, 38), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (38, 39), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (39, 40), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (40, 48), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (48, 55), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (55, 56), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (56, 60), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (60, 61), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (61, 68), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (68, 69), 'type': 'ws'}
{'val': '_edge0', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (69, 75), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (75, 76), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (76, 77), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (77, 84), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (84, 85), 'type': 'ws'}
{'val': '_edge1', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (85, 91), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (91, 92), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (92, 93), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (93, 100), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (100, 101), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (101, 103), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (103, 104), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (104, 105), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 step(any_f32 _edge, any_f32 _n);        any_f32 step(any_f32 _edge0, any_f32 _edge1, any_f32 _n);', 'range': (105, 106), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (8, 12), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (12, 13), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (13, 20), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (20, 21), 'type': 'ws'}
{'val': '_edge', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (21, 26), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (26, 27), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (27, 28), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (28, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (35, 36), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (36, 38), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (38, 39), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (39, 40), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (40, 48), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (48, 55), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (55, 56), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (56, 60), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (60, 61), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (61, 68), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (68, 69), 'type': 'ws'}
{'val': '_edge0', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (69, 75), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (75, 76), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (76, 77), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (77, 84), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (84, 85), 'type': 'ws'}
{'val': '_edge1', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (85, 91), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (91, 92), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (92, 93), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (93, 100), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (100, 101), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (101, 103), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (103, 104), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (104, 105), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 step(any_f64 _edge, any_f64 _n);        any_f64 step(any_f64 _edge0, any_f64 _edge1, any_f64 _n);', 'range': (105, 106), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (8, 12), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (12, 13), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '    ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (13, 17), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (17, 20), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (20, 21), 'type': 'ws'}
{'val': '_edge', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (21, 26), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (26, 27), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (27, 28), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (28, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (35, 36), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (36, 38), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (38, 39), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (39, 40), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (40, 48), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (48, 55), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (55, 56), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (56, 60), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (60, 61), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '    ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (61, 65), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (65, 68), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (68, 69), 'type': 'ws'}
{'val': '_edge0', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (69, 75), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (75, 76), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (76, 81), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (81, 84), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (84, 85), 'type': 'ws'}
{'val': '_edge1', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (85, 91), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (91, 92), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (92, 93), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (93, 100), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (100, 101), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (101, 103), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (103, 104), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (104, 105), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 step(    f32 _edge, any_f32 _n);        any_f32 step(    f32 _edge0,     f32 _edge1, any_f32 _n);', 'range': (105, 106), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (8, 12), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (12, 13), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '    ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (13, 17), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (17, 20), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (20, 21), 'type': 'ws'}
{'val': '_edge', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (21, 26), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (26, 27), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (27, 28), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (28, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (35, 36), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (36, 38), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (38, 39), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (39, 40), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (40, 48), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (48, 55), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (55, 56), 'type': 'ws'}
{'val': 'step', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (56, 60), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (60, 61), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '    ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (61, 65), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (65, 68), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (68, 69), 'type': 'ws'}
{'val': '_edge0', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (69, 75), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (75, 76), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (76, 81), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (81, 84), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (84, 85), 'type': 'ws'}
{'val': '_edge1', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (85, 91), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (91, 92), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (92, 93), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (93, 100), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (100, 101), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (101, 103), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (103, 104), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (104, 105), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 step(    f64 _edge, any_f64 _n);        any_f64 step(    f64 _edge0,     f64 _edge1, any_f64 _n);', 'range': (105, 106), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (0, 5), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (5, 6), 'type': 'ws'}
{'val': 'isnan', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (6, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (19, 20), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (20, 22), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (23, 24), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (24, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (37, 38), 'type': 'ws'}
{'val': 'isinf', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (38, 43), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (43, 44), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (44, 51), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (51, 52), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (52, 54), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (55, 56), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (56, 57), 'type': 'nl'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (0, 5), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (5, 6), 'type': 'ws'}
{'val': 'isnan', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (6, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (19, 20), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (20, 22), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (23, 24), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (24, 32), 'type': 'ws'}
{'val': 'any_b', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (32, 37), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (37, 38), 'type': 'ws'}
{'val': 'isinf', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (38, 43), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (43, 44), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (44, 51), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (51, 52), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (52, 54), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (55, 56), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_b isnan(any_f32 _n);        any_b isinf(any_f64 _n);', 'range': (56, 57), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'floatBitsToI32', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (8, 22), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'highp', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (23, 28), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (28, 29), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (29, 36), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (36, 37), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (37, 39), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (39, 40), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (40, 41), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_i32 floatBitsToI32(highp any_f32 _n);', 'range': (41, 42), 'type': 'nl'}
{'val': 'any_i64', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'floatBitsToU32', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (8, 22), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'highp', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (23, 28), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (28, 29), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (29, 36), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (36, 37), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (37, 39), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (39, 40), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (40, 41), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_i64 floatBitsToU32(highp any_f64 _n);', 'range': (41, 42), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'i32BitsToFloat', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (8, 22), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'highp', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (23, 28), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (28, 29), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (29, 36), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (36, 37), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (37, 39), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (39, 40), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (40, 41), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 i32BitsToFloat(highp any_i32 _n);', 'range': (41, 42), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (7, 8), 'type': 'ws'}
{'val': 'u32BitsToFloat', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (8, 22), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (22, 23), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'highp', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (23, 28), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (28, 29), 'type': 'ws'}
{'val': 'any_u32', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (29, 36), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (36, 37), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (37, 39), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (39, 40), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (40, 41), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 u32BitsToFloat(highp any_u32 _n);', 'range': (41, 42), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (7, 8), 'type': 'ws'}
{'val': 'fma', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (31, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (32, 34), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (34, 35), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (35, 36), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (36, 43), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (43, 44), 'type': 'ws'}
{'val': '_c', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (44, 46), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (46, 47), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (47, 48), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 fma(any_f32 _a, any_f32 _b, any_f32 _c);', 'range': (48, 49), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (7, 8), 'type': 'ws'}
{'val': 'fma', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (8, 11), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (11, 12), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (12, 19), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (19, 20), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (20, 22), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (22, 23), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (23, 24), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (24, 31), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (31, 32), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (32, 34), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (34, 35), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (35, 36), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (36, 43), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (43, 44), 'type': 'ws'}
{'val': '_c', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (44, 46), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (46, 47), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (47, 48), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 fma(any_f64 _a, any_f64 _b, any_f64 _c);', 'range': (48, 49), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (7, 8), 'type': 'ws'}
{'val': 'frexp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (8, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'highp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (14, 19), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (27, 28), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (31, 32), 'type': 'ws'}
{'val': 'out', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (32, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (35, 36), 'type': 'ws'}
{'val': 'highp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (36, 41), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (41, 42), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (42, 49), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (49, 50), 'type': 'ws'}
{'val': '_exp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (50, 54), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (55, 56), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (56, 62), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (62, 69), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (69, 70), 'type': 'ws'}
{'val': 'frexp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (70, 75), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (75, 76), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'highp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (76, 81), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (81, 82), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (82, 89), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (89, 90), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (90, 92), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (92, 93), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (93, 94), 'type': 'ws'}
{'val': 'highp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (94, 99), 'type': 'kw'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (99, 100), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (107, 108), 'type': 'ws'}
{'val': '_exp', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (108, 112), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (112, 113), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (113, 114), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 frexp(highp any_f32 _n, out highp any_i32 _exp);      any_f32 frexp(highp any_f32 _n, highp any_i32 _exp);', 'range': (114, 115), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (7, 8), 'type': 'ws'}
{'val': 'frexp', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (8, 13), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (14, 20), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (27, 28), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (31, 32), 'type': 'ws'}
{'val': 'out', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (32, 35), 'type': 'id'}
{'val': '       ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (35, 42), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (42, 49), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (49, 50), 'type': 'ws'}
{'val': '_exp', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (50, 54), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (54, 55), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (55, 56), 'type': 'sc'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (56, 62), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (62, 69), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (69, 70), 'type': 'ws'}
{'val': 'frexp', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (70, 75), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (75, 76), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '      ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (76, 82), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (82, 89), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (89, 90), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (90, 92), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (92, 93), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': '       ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (93, 100), 'type': 'ws'}
{'val': 'any_i32', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (100, 107), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (107, 108), 'type': 'ws'}
{'val': '_exp', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (108, 112), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (112, 113), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (113, 114), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 frexp(      any_f64 _n, out       any_i32 _exp);      any_f64 frexp(      any_f64 _n,       any_i32 _exp);', 'range': (114, 115), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'f32', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (0, 3), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (3, 4), 'type': 'ws'}
{'val': 'len', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (4, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (15, 16), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (16, 18), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (18, 19), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (19, 20), 'type': 'sc'}
{'val': '    ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (20, 24), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (24, 27), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (27, 28), 'type': 'ws'}
{'val': 'dist', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (28, 32), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (32, 33), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (33, 40), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (40, 41), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (41, 43), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (43, 44), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (44, 45), 'type': 'ws'}
{'val': 'anu_f32', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (45, 52), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (52, 53), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (53, 55), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (55, 56), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (56, 57), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'f32 len(any_f32 _n);    f32 dist(any_f32 _a, anu_f32 _b);', 'range': (57, 58), 'type': 'nl'}
{'val': 'f64', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (0, 3), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (3, 4), 'type': 'ws'}
{'val': 'len', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (4, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (15, 16), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (16, 18), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (18, 19), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (19, 20), 'type': 'sc'}
{'val': '    ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (20, 24), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (24, 27), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (27, 28), 'type': 'ws'}
{'val': 'dist', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (28, 32), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (32, 33), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (33, 40), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (40, 41), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (41, 43), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (43, 44), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (44, 45), 'type': 'ws'}
{'val': 'anu_f64', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (45, 52), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (52, 53), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (53, 55), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (55, 56), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (56, 57), 'type': 'sc'}
{'val': '\n', 'line': '000001', 'src': 'f64 len(any_f64 _n);    f64 dist(any_f64 _a, anu_f64 _b);', 'range': (57, 58), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'f32', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (0, 3), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (3, 4), 'type': 'ws'}
{'val': 'dot', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (4, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (28, 30), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (30, 31), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (31, 32), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (32, 40), 'type': 'ws'}
{'val': 'f32v3', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (40, 45), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (45, 46), 'type': 'ws'}
{'val': 'cross', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (46, 51), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (51, 52), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v3', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (52, 57), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (57, 58), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (58, 60), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (60, 61), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (61, 62), 'type': 'ws'}
{'val': 'f32v3', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (62, 67), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (67, 68), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (68, 70), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (70, 71), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (71, 76), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (76, 83), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (83, 84), 'type': 'ws'}
{'val': 'norm', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (84, 88), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (89, 96), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (96, 97), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (97, 99), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '\n', 'line': '000001', 'src': 'f32 dot(any_f32 _a, any_f32 _b);        f32v3 cross(f32v3 _a, f32v3 _b)     any_f32 norm(any_f32 _n)', 'range': (100, 101), 'type': 'nl'}
{'val': 'f64', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (0, 3), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (3, 4), 'type': 'ws'}
{'val': 'dot', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (4, 7), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (8, 15), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (15, 16), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (16, 18), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (18, 19), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (19, 20), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (27, 28), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (28, 30), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (30, 31), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (31, 32), 'type': 'sc'}
{'val': '        ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (32, 40), 'type': 'ws'}
{'val': 'f64v3', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (40, 45), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (45, 46), 'type': 'ws'}
{'val': 'cross', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (46, 51), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (51, 52), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f64v3', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (52, 57), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (57, 58), 'type': 'ws'}
{'val': '_a', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (58, 60), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (60, 61), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (61, 62), 'type': 'ws'}
{'val': 'f64v3', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (62, 67), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (67, 68), 'type': 'ws'}
{'val': '_b', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (68, 70), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (70, 71), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (71, 76), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (76, 83), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (83, 84), 'type': 'ws'}
{'val': 'norm', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (84, 88), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (88, 89), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (89, 96), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (96, 97), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (97, 99), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (99, 100), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '\n', 'line': '000001', 'src': 'f64 dot(any_f64 _a, any_f64 _b);        f64v3 cross(f64v3 _a, f64v3 _b)     any_f64 norm(any_f64 _n)', 'range': (100, 101), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (7, 8), 'type': 'ws'}
{'val': 'faceForward', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (8, 19), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (19, 20), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (27, 28), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (39, 40), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (40, 42), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (42, 43), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (43, 44), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (44, 51), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (51, 52), 'type': 'ws'}
{'val': '_nref', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (52, 57), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (57, 58), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 faceForward(any_f32 _n, any_f32 _i, any_f32 _nref)', 'range': (58, 59), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (7, 8), 'type': 'ws'}
{'val': 'faceForward', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (8, 19), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (19, 20), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (20, 27), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (27, 28), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (28, 30), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (31, 32), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (32, 39), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (39, 40), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (40, 42), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (42, 43), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (43, 44), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (44, 51), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (51, 52), 'type': 'ws'}
{'val': '_nref', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (52, 57), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (57, 58), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 faceForward(any_f64 _n, any_f64 _i, any_f64 _nref)', 'range': (58, 59), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (7, 8), 'type': 'ws'}
{'val': 'reflect', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (8, 15), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (16, 23), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (23, 24), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (24, 26), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (26, 27), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (27, 28), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (28, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (35, 36), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (36, 38), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (38, 39), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (39, 44), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (44, 51), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (51, 52), 'type': 'ws'}
{'val': 'refract', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (52, 59), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (59, 60), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (60, 67), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (67, 68), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (68, 70), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (70, 71), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (71, 72), 'type': 'ws'}
{'val': 'any_f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (72, 79), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (79, 80), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (80, 82), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (82, 83), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (83, 84), 'type': 'ws'}
{'val': 'f32', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (84, 87), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (87, 88), 'type': 'ws'}
{'val': '_eta', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (88, 92), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (92, 93), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '\n', 'line': '000001', 'src': 'any_f32 reflect(any_f32 _i, any_f32 _n)     any_f32 refract(any_f32 _i, any_f32 _n, f32 _eta)', 'range': (93, 94), 'type': 'nl'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (0, 7), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (7, 8), 'type': 'ws'}
{'val': 'reflect', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (8, 15), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (16, 23), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (23, 24), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (24, 26), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (26, 27), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (27, 28), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (28, 35), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (35, 36), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (36, 38), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (38, 39), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '     ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (39, 44), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (44, 51), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (51, 52), 'type': 'ws'}
{'val': 'refract', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (52, 59), 'type': 'id'}
{'val': '(', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (59, 60), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (60, 67), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (67, 68), 'type': 'ws'}
{'val': '_i', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (68, 70), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (70, 71), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (71, 72), 'type': 'ws'}
{'val': 'any_f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (72, 79), 'type': 'id'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (79, 80), 'type': 'ws'}
{'val': '_n', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (80, 82), 'type': 'id'}
{'val': ',', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (82, 83), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (83, 84), 'type': 'ws'}
{'val': 'f64', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (84, 87), 'type': 'tn'}
{'val': ' ', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (87, 88), 'type': 'ws'}
{'val': '_eta', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (88, 92), 'type': 'id'}
{'val': ')', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (92, 93), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '\n', 'line': '000001', 'src': 'any_f64 reflect(any_f64 _i, any_f64 _n)     any_f64 refract(any_f64 _i, any_f64 _n, f64 _eta)', 'range': (93, 94), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000001', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000002', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '#', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (0, 1), 'type': 'ppd'}
{'val': 'define', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (1, 7), 'type': 'id'}
{'val': ' ', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (7, 8), 'type': 'ws'}
{'val': 'gx', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (8, 10), 'type': 'id'}
{'val': ' ', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (10, 11), 'type': 'ws'}
{'val': 'gl_GlobalInvocationID', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (11, 32), 'type': 'id'}
{'val': '.', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (32, 33), 'type': 'op', 'ctgr': 'fld', 'prec': 2, 'assoc': 'lr'}
{'val': 'x', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (33, 34), 'type': 'id'}
{'val': '\n', 'line': '000003', 'src': '#define gx gl_GlobalInvocationID.x', 'range': (34, 35), 'type': 'nl'}
{'val': '#', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (0, 1), 'type': 'ppd'}
{'val': 'define', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (1, 7), 'type': 'id'}
{'val': ' ', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (7, 8), 'type': 'ws'}
{'val': 'gy', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (8, 10), 'type': 'id'}
{'val': ' ', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (10, 11), 'type': 'ws'}
{'val': 'gl_GlobalInvocationID', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (11, 32), 'type': 'id'}
{'val': '.', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (32, 33), 'type': 'op', 'ctgr': 'fld', 'prec': 2, 'assoc': 'lr'}
{'val': 'y', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (33, 34), 'type': 'id'}
{'val': '\n', 'line': '000004', 'src': '#define gy gl_GlobalInvocationID.y', 'range': (34, 35), 'type': 'nl'}
{'val': '#', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (0, 1), 'type': 'ppd'}
{'val': 'define', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (1, 7), 'type': 'id'}
{'val': ' ', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (7, 8), 'type': 'ws'}
{'val': 'g', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (8, 9), 'type': 'id'}
{'val': ' ', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (9, 10), 'type': 'ws'}
{'val': 'gl_GlobalInvocationID', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (10, 31), 'type': 'id'}
{'val': '\n', 'line': '000005', 'src': '#define g gl_GlobalInvocationID', 'range': (31, 32), 'type': 'nl'}
{'val': '\n', 'line': '000006', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000007', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000008', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000009', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000010', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000011', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000012', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000013', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000014', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000015', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000016', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000017', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000018', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000019', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'extern', 'line': '000020', 'src': 'extern outCol {', 'range': (0, 6), 'type': 'kw'}
{'val': ' ', 'line': '000020', 'src': 'extern outCol {', 'range': (6, 7), 'type': 'ws'}
{'val': 'outCol', 'line': '000020', 'src': 'extern outCol {', 'range': (7, 13), 'type': 'id'}
{'val': ' ', 'line': '000020', 'src': 'extern outCol {', 'range': (13, 14), 'type': 'ws'}
{'val': '{', 'line': '000020', 'src': 'extern outCol {', 'range': (14, 15), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000020', 'src': 'extern outCol {', 'range': (15, 16), 'type': 'nl'}
{'val': '\t', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (0, 1), 'type': 'ws'}
{'val': 'f32v4', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (1, 6), 'type': 'tn'}
{'val': ' ', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (6, 7), 'type': 'ws'}
{'val': 'outcol', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (7, 13), 'type': 'id'}
{'val': '[', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': ']', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (14, 15), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': ';', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (15, 16), 'type': 'sc'}
{'val': '\n', 'line': '000021', 'src': '\tf32v4 outcol[];', 'range': (16, 17), 'type': 'nl'}
{'val': '}', 'line': '000022', 'src': '}', 'range': (0, 1), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000022', 'src': '}', 'range': (1, 2), 'type': 'nl'}
{'val': '\n', 'line': '000023', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000024', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000025', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'extern', 'line': '000026', 'src': 'extern wsize {', 'range': (0, 6), 'type': 'kw'}
{'val': ' ', 'line': '000026', 'src': 'extern wsize {', 'range': (6, 7), 'type': 'ws'}
{'val': 'wsize', 'line': '000026', 'src': 'extern wsize {', 'range': (7, 12), 'type': 'id'}
{'val': ' ', 'line': '000026', 'src': 'extern wsize {', 'range': (12, 13), 'type': 'ws'}
{'val': '{', 'line': '000026', 'src': 'extern wsize {', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000026', 'src': 'extern wsize {', 'range': (14, 15), 'type': 'nl'}
{'val': '\t', 'line': '000027', 'src': '\tu32v2 wsize;', 'range': (0, 1), 'type': 'ws'}
{'val': 'u32v2', 'line': '000027', 'src': '\tu32v2 wsize;', 'range': (1, 6), 'type': 'tn'}
{'val': ' ', 'line': '000027', 'src': '\tu32v2 wsize;', 'range': (6, 7), 'type': 'ws'}
{'val': 'wsize', 'line': '000027', 'src': '\tu32v2 wsize;', 'range': (7, 12), 'type': 'id'}
{'val': ';', 'line': '000027', 'src': '\tu32v2 wsize;', 'range': (12, 13), 'type': 'sc'}
{'val': '\n', 'line': '000027', 'src': '\tu32v2 wsize;', 'range': (13, 14), 'type': 'nl'}
{'val': '}', 'line': '000028', 'src': '}', 'range': (0, 1), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000028', 'src': '}', 'range': (1, 2), 'type': 'nl'}
{'val': '\n', 'line': '000029', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000030', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000031', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000032', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000033', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000034', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000035', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000036', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'local', 'line': '000037', 'src': 'local {', 'range': (0, 5), 'type': 'kw'}
{'val': ' ', 'line': '000037', 'src': 'local {', 'range': (5, 6), 'type': 'ws'}
{'val': '{', 'line': '000037', 'src': 'local {', 'range': (6, 7), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000037', 'src': 'local {', 'range': (7, 8), 'type': 'nl'}
{'val': '\t', 'line': '000038', 'src': '\tf32v3 pos;', 'range': (0, 1), 'type': 'ws'}
{'val': 'f32v3', 'line': '000038', 'src': '\tf32v3 pos;', 'range': (1, 6), 'type': 'tn'}
{'val': ' ', 'line': '000038', 'src': '\tf32v3 pos;', 'range': (6, 7), 'type': 'ws'}
{'val': 'pos', 'line': '000038', 'src': '\tf32v3 pos;', 'range': (7, 10), 'type': 'id'}
{'val': ';', 'line': '000038', 'src': '\tf32v3 pos;', 'range': (10, 11), 'type': 'sc'}
{'val': '\n', 'line': '000038', 'src': '\tf32v3 pos;', 'range': (11, 12), 'type': 'nl'}
{'val': '\t', 'line': '000039', 'src': '\tf32 r;', 'range': (0, 1), 'type': 'ws'}
{'val': 'f32', 'line': '000039', 'src': '\tf32 r;', 'range': (1, 4), 'type': 'tn'}
{'val': ' ', 'line': '000039', 'src': '\tf32 r;', 'range': (4, 5), 'type': 'ws'}
{'val': 'r', 'line': '000039', 'src': '\tf32 r;', 'range': (5, 6), 'type': 'id'}
{'val': ';', 'line': '000039', 'src': '\tf32 r;', 'range': (6, 7), 'type': 'sc'}
{'val': '\n', 'line': '000039', 'src': '\tf32 r;', 'range': (7, 8), 'type': 'nl'}
{'val': '\t', 'line': '000040', 'src': '\tf32v4 col;', 'range': (0, 1), 'type': 'ws'}
{'val': 'f32v4', 'line': '000040', 'src': '\tf32v4 col;', 'range': (1, 6), 'type': 'tn'}
{'val': ' ', 'line': '000040', 'src': '\tf32v4 col;', 'range': (6, 7), 'type': 'ws'}
{'val': 'col', 'line': '000040', 'src': '\tf32v4 col;', 'range': (7, 10), 'type': 'id'}
{'val': ';', 'line': '000040', 'src': '\tf32v4 col;', 'range': (10, 11), 'type': 'sc'}
{'val': '\n', 'line': '000040', 'src': '\tf32v4 col;', 'range': (11, 12), 'type': 'nl'}
{'val': '}', 'line': '000041', 'src': '}', 'range': (0, 1), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000041', 'src': '}', 'range': (1, 2), 'type': 'nl'}
{'val': '\n', 'line': '000042', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000043', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000044', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000045', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000046', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'void', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (0, 4), 'type': 'tn'}
{'val': ' ', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (4, 5), 'type': 'ws'}
{'val': 'setPixel', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (5, 13), 'type': 'id'}
{'val': '(', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (13, 14), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (14, 19), 'type': 'tn'}
{'val': ' ', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (19, 20), 'type': 'ws'}
{'val': 'pos', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (20, 23), 'type': 'id'}
{'val': ',', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (23, 24), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (24, 25), 'type': 'ws'}
{'val': 'f32v4', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (25, 30), 'type': 'tn'}
{'val': ' ', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (30, 31), 'type': 'ws'}
{'val': 'col', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (31, 34), 'type': 'id'}
{'val': ')', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (34, 35), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ' ', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (35, 36), 'type': 'ws'}
{'val': '{', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (36, 37), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000047', 'src': 'void setPixel(f32v2 pos, f32v4 col) {', 'range': (37, 38), 'type': 'nl'}
{'val': '\t', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (0, 1), 'type': 'ws'}
{'val': 'u32', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (1, 4), 'type': 'tn'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (4, 5), 'type': 'ws'}
{'val': 'i', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (5, 6), 'type': 'id'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (6, 7), 'type': 'ws'}
{'val': '=', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (7, 8), 'type': 'op', 'ctgr': 'set', 'prec': 16, 'assoc': 'rl'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (8, 9), 'type': 'ws'}
{'val': 'u32', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (9, 12), 'type': 'tn'}
{'val': '(', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (12, 13), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'pos', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (13, 16), 'type': 'id'}
{'val': '.', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (16, 17), 'type': 'op', 'ctgr': 'fld', 'prec': 2, 'assoc': 'lr'}
{'val': 'y', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (17, 18), 'type': 'id'}
{'val': ')', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (18, 19), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (19, 20), 'type': 'ws'}
{'val': '*', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (20, 21), 'type': 'op', 'ctgr': 'bin', 'prec': 4, 'assoc': 'lr'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (21, 22), 'type': 'ws'}
{'val': 'wsize', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (22, 27), 'type': 'id'}
{'val': '.', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (27, 28), 'type': 'op', 'ctgr': 'fld', 'prec': 2, 'assoc': 'lr'}
{'val': 'x', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (28, 29), 'type': 'id'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (29, 30), 'type': 'ws'}
{'val': '+', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (30, 31), 'type': 'op', 'ctgr': 'bin', 'prec': 3, 'assoc': 'lr'}
{'val': ' ', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (31, 32), 'type': 'ws'}
{'val': 'u32', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (32, 35), 'type': 'tn'}
{'val': '(', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (35, 36), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'pos', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (36, 39), 'type': 'id'}
{'val': '.', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (39, 40), 'type': 'op', 'ctgr': 'fld', 'prec': 2, 'assoc': 'lr'}
{'val': 'x', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (40, 41), 'type': 'id'}
{'val': ')', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (41, 42), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (42, 43), 'type': 'sc'}
{'val': '\n', 'line': '000048', 'src': '\tu32 i = u32(pos.y) * wsize.x + u32(pos.x);', 'range': (43, 44), 'type': 'nl'}
{'val': '\t', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (0, 1), 'type': 'ws'}
{'val': 'outcol', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (1, 7), 'type': 'id'}
{'val': '[', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (7, 8), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': 'i', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (8, 9), 'type': 'id'}
{'val': ']', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': ' ', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (10, 11), 'type': 'ws'}
{'val': '=', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (11, 12), 'type': 'op', 'ctgr': 'set', 'prec': 16, 'assoc': 'rl'}
{'val': ' ', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (12, 13), 'type': 'ws'}
{'val': 'col', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (13, 16), 'type': 'id'}
{'val': ';', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (16, 17), 'type': 'sc'}
{'val': '\n', 'line': '000049', 'src': '\toutcol[i] = col;', 'range': (17, 18), 'type': 'nl'}
{'val': '}', 'line': '000050', 'src': '}', 'range': (0, 1), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000050', 'src': '}', 'range': (1, 2), 'type': 'nl'}
{'val': '\n', 'line': '000051', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000052', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': 'void', 'line': '000053', 'src': 'void main() {', 'range': (0, 4), 'type': 'tn'}
{'val': ' ', 'line': '000053', 'src': 'void main() {', 'range': (4, 5), 'type': 'ws'}
{'val': 'main', 'line': '000053', 'src': 'void main() {', 'range': (5, 9), 'type': 'id'}
{'val': '(', 'line': '000053', 'src': 'void main() {', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000053', 'src': 'void main() {', 'range': (10, 11), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ' ', 'line': '000053', 'src': 'void main() {', 'range': (11, 12), 'type': 'ws'}
{'val': '{', 'line': '000053', 'src': 'void main() {', 'range': (12, 13), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000053', 'src': 'void main() {', 'range': (13, 14), 'type': 'nl'}
{'val': '\t', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (0, 1), 'type': 'ws'}
{'val': 'setPixel', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (1, 9), 'type': 'id'}
{'val': '(', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (10, 15), 'type': 'tn'}
{'val': '(', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '1', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (16, 17), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (17, 18), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (18, 19), 'type': 'ws'}
{'val': '1', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (19, 20), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (20, 21), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ',', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (21, 22), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (22, 23), 'type': 'ws'}
{'val': 'f32v4', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (23, 28), 'type': 'tn'}
{'val': '(', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (28, 29), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '250', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (29, 32), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (32, 33), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (33, 34), 'type': 'ws'}
{'val': '0', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (34, 35), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (35, 36), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (36, 37), 'type': 'ws'}
{'val': '0', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (37, 38), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (38, 39), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (39, 40), 'type': 'ws'}
{'val': '250', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (40, 43), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (43, 44), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000054', 'src': '\tsetPixel(f32v2(1, 1), f32v4(250, 0, 0, 250));', 'range': (46, 47), 'type': 'nl'}
{'val': '\t', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (0, 1), 'type': 'ws'}
{'val': 'setPixel', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (1, 9), 'type': 'id'}
{'val': '(', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (10, 15), 'type': 'tn'}
{'val': '(', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '1', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (16, 17), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (17, 18), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (18, 19), 'type': 'ws'}
{'val': '1', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (19, 20), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (20, 21), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ',', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (21, 22), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (22, 23), 'type': 'ws'}
{'val': 'f32v4', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (23, 28), 'type': 'tn'}
{'val': '(', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (28, 29), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '1', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (29, 30), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (31, 32), 'type': 'ws'}
{'val': '0', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (32, 33), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (33, 34), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (34, 35), 'type': 'ws'}
{'val': '0', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (35, 36), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (36, 37), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (37, 38), 'type': 'ws'}
{'val': '1', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (38, 39), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (39, 40), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (40, 41), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (41, 42), 'type': 'sc'}
{'val': '\n', 'line': '000055', 'src': '\tsetPixel(f32v2(1, 1), f32v4(1, 0, 0, 1));', 'range': (42, 43), 'type': 'nl'}
{'val': '\n', 'line': '000056', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\t', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (0, 1), 'type': 'ws'}
{'val': 'setPixel', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (1, 9), 'type': 'id'}
{'val': '(', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (10, 15), 'type': 'tn'}
{'val': '(', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '0.5', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (16, 19), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (19, 20), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (20, 21), 'type': 'ws'}
{'val': '0.5', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (21, 24), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ',', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (25, 26), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (26, 27), 'type': 'ws'}
{'val': 'f32v4', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (27, 32), 'type': 'tn'}
{'val': '(', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (32, 33), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '250', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (33, 36), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (36, 37), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (37, 38), 'type': 'ws'}
{'val': '0', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (38, 39), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (39, 40), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (40, 41), 'type': 'ws'}
{'val': '0', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (41, 42), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (42, 43), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (43, 44), 'type': 'ws'}
{'val': '250', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (44, 47), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (47, 48), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (48, 49), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (49, 50), 'type': 'sc'}
{'val': '\n', 'line': '000057', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(250, 0, 0, 250));', 'range': (50, 51), 'type': 'nl'}
{'val': '\t', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (0, 1), 'type': 'ws'}
{'val': 'setPixel', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (1, 9), 'type': 'id'}
{'val': '(', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (10, 15), 'type': 'tn'}
{'val': '(', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '0.5', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (16, 19), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (19, 20), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (20, 21), 'type': 'ws'}
{'val': '0.5', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (21, 24), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (24, 25), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ',', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (25, 26), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (26, 27), 'type': 'ws'}
{'val': 'f32v4', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (27, 32), 'type': 'tn'}
{'val': '(', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (32, 33), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '1', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (33, 34), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (34, 35), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (35, 36), 'type': 'ws'}
{'val': '0', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (36, 37), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (37, 38), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (38, 39), 'type': 'ws'}
{'val': '0', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (39, 40), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (40, 41), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (41, 42), 'type': 'ws'}
{'val': '1', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (42, 43), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (43, 44), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000058', 'src': '\tsetPixel(f32v2(0.5, 0.5), f32v4(1, 0, 0, 1));', 'range': (46, 47), 'type': 'nl'}
{'val': '\n', 'line': '000059', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\t', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (0, 1), 'type': 'ws'}
{'val': 'setPixel', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (1, 9), 'type': 'id'}
{'val': '(', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (10, 15), 'type': 'tn'}
{'val': '(', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '0', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (16, 17), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (17, 18), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (18, 19), 'type': 'ws'}
{'val': '0', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (19, 20), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (20, 21), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ',', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (21, 22), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (22, 23), 'type': 'ws'}
{'val': 'f32v4', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (23, 28), 'type': 'tn'}
{'val': '(', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (28, 29), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '250', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (29, 32), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (32, 33), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (33, 34), 'type': 'ws'}
{'val': '0', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (34, 35), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (35, 36), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (36, 37), 'type': 'ws'}
{'val': '0', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (37, 38), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (38, 39), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (39, 40), 'type': 'ws'}
{'val': '250', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (40, 43), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (43, 44), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (44, 45), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (45, 46), 'type': 'sc'}
{'val': '\n', 'line': '000060', 'src': '\tsetPixel(f32v2(0, 0), f32v4(250, 0, 0, 250));', 'range': (46, 47), 'type': 'nl'}
{'val': '\t', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (0, 1), 'type': 'ws'}
{'val': 'setPixel', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (1, 9), 'type': 'id'}
{'val': '(', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (9, 10), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': 'f32v2', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (10, 15), 'type': 'tn'}
{'val': '(', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (15, 16), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '0', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (16, 17), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (17, 18), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (18, 19), 'type': 'ws'}
{'val': '0', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (19, 20), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (20, 21), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ',', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (21, 22), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (22, 23), 'type': 'ws'}
{'val': 'f32v4', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (23, 28), 'type': 'tn'}
{'val': '(', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (28, 29), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': '1', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (29, 30), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (30, 31), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (31, 32), 'type': 'ws'}
{'val': '0', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (32, 33), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (33, 34), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (34, 35), 'type': 'ws'}
{'val': '0', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (35, 36), 'type': 'lc', 'base': 10}
{'val': ',', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (36, 37), 'type': 'op', 'ctgr': 'seq', 'prec': 17, 'assoc': 'lr'}
{'val': ' ', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (37, 38), 'type': 'ws'}
{'val': '1', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (38, 39), 'type': 'lc', 'base': 10}
{'val': ')', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (39, 40), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ')', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (40, 41), 'type': 'op', 'ctgr': 'sep', 'prec': 1, 'assoc': 'lr'}
{'val': ';', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (41, 42), 'type': 'sc'}
{'val': '\n', 'line': '000061', 'src': '\tsetPixel(f32v2(0, 0), f32v4(1, 0, 0, 1));', 'range': (42, 43), 'type': 'nl'}
{'val': '\n', 'line': '000062', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '}', 'line': '000063', 'src': '}', 'range': (0, 1), 'type': 'op', 'ctgr': 'sep', 'prec': 2, 'assoc': 'lr'}
{'val': '\n', 'line': '000063', 'src': '}', 'range': (1, 2), 'type': 'nl'}
{'val': '\n', 'line': '000064', 'src': '', 'range': (0, 1), 'type': 'nl'}
{'val': '\n', 'line': '000065', 'src': '', 'range': (0, 1), 'type': 'nl'}